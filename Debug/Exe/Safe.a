;/*
;   Digital Safe Lock
;   Mohammad Solki
;   Student ID: 9411412054
;   Email: d4rk@cyberservices.com
;*/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <string.h>
;#include <stdio.h>
;
;// Config Initial Valuse
;#define DEFULT_PASS "1234"
;#define LOCKDOWN_TIME 10
;#define COUNTDOWN_TIME 15
;
;flash unsigned char Key_Pattern[4]={0xFE, 0xFD, 0xFB, 0xF7};
;flash unsigned char key_number[4][3] ={'*', '0', '#',
;                              '7', '8', '9',
;                              '4', '5', '6',
;                              '1', '2', '3'};
;
;unsigned char pass[16] = DEFULT_PASS;

	.DSEG
;unsigned char pass_temp[16];
;unsigned char new_pass[16];
;unsigned char msg[32];
;unsigned char sync = 0;
;int lockdown = LOCKDOWN_TIME;
;int countdown = COUNTDOWN_TIME;
;int attempts = 0;
;int status = 4;
;
;void clear_one(char *);
;void my_clear(char *);
;void change_pass(char []);
;void display_msg();
;void set_msg(char *);
;void display_lockdown(void);
;
;// Timer 0 for lockdown
;interrupt [TIM0_COMP] void timer0_comp_isr(void){
; 0000 002B interrupt [11] void timer0_comp_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C     if (status != 100 && status != 0) return; // just make sure that we are in lockdown or countdown mode
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D 
; 0000 002E     if (status == 100){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002F         sync = 1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0030         lockdown--;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0031 
; 0000 0032         // exit from lockdown when time is zero
; 0000 0033         if (lockdown == 0) {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034             lockdown = LOCKDOWN_TIME + LOCKDOWN_TIME * (attempts / 3);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0035             TIMSK = (0<<OCIE0); // turn off timer 0 interrupt flag
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0036             status = 0;
;PCODE: $0000002E VOL: 0
; 0000 0037         }
; 0000 0038     } else if (status == 0){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0039         countdown--;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003A 
; 0000 003B         // exit from countdown when time is zero
; 0000 003C         if (countdown == 0) {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003D             countdown = COUNTDOWN_TIME;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003E             TIMSK = (0<<OCIE0); // turn off timer 0 interrupt flag
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 003F             status = 5;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0040         }
; 0000 0041     }
;PCODE: $0000003F VOL: 0
; 0000 0042 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;
;// Interrupt 0 for back button
;interrupt [EXT_INT0] void ext_int0_isr(void){
; 0000 0046 interrupt [2] void ext_int0_isr(void){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0047 
; 0000 0048     switch (status){
;PCODE: $00000047 VOL: 0
; 0000 0049         case -1:
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 004A             my_clear(pass_temp);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004B             status = 0;
;PCODE: $0000004C VOL: 0
; 0000 004C             break;
;PCODE: $0000004D VOL: 0
; 0000 004D         case -2:
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004E             status = 1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004F             break;
;PCODE: $00000053 VOL: 0
; 0000 0050         case -3:
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0051             my_clear(pass_temp);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0052             my_clear(new_pass);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0053             status = 2;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0054             break;
;PCODE: $0000005D VOL: 0
; 0000 0055 
; 0000 0056         case 1:
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0057             my_clear(pass_temp);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0058             status = 0;
;PCODE: $00000063 VOL: 0
; 0000 0059             break;
;PCODE: $00000064 VOL: 0
; 0000 005A         case 2:
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005B             status = 1;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 005C             break;
;PCODE: $0000006A VOL: 0
; 0000 005D         case 3:
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 005E             my_clear(pass_temp);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005F             my_clear(new_pass);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0060             status = 2;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0061             break;
;PCODE: $00000074 VOL: 0
; 0000 0062     }
;PCODE: $00000075 VOL: 0
; 0000 0063 
; 0000 0064 }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;// Interrupt 1 for PIR sensor
;interrupt [EXT_INT1] void ext_int1_isr(void){
; 0000 0067 interrupt [3] void ext_int1_isr(void){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0068     if (status == 5) return ;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0069 
; 0000 006A     if (PIND.3 == 1) {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006B         TIMSK = (1<<OCIE0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 006C         status = 0;
;PCODE: $00000086 VOL: 0
; 0000 006D     } else {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006E         my_clear(pass_temp);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006F         my_clear(new_pass);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0070         TIMSK = (0<<OCIE0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0071         countdown = COUNTDOWN_TIME;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0072         status = 4;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0073     }
;PCODE: $00000093 VOL: 0
; 0000 0074 
; 0000 0075 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;// Interrupt 2 for key pad
;interrupt [EXT_INT2] void ext_int2_isr(void){
; 0000 0078 interrupt [4] void ext_int2_isr(void){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0079    char row, column = -1, temp;
; 0000 007A    char message[32];
; 0000 007B 
; 0000 007C    for (row=0; row<4; row++){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;	row -> R17
;	column -> R16
;	temp -> R19
;	message -> Y+4
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007D        PORTA = Key_Pattern[row];
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 007E 
; 0000 007F        temp = PINA;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0080        temp = temp & 0xF0;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0081 
; 0000 0082        if (temp != 0xF0){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0083 
; 0000 0084            if (PINA.5 == 0)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0085               column=0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0086            if (PINA.6 == 0)
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0087               column=1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0088            if (PINA.7 == 0)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0089               column=2;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 008A 
; 0000 008B            if (column != -1){
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 008C                break;
;PCODE: $000000CA VOL: 0
; 0000 008D            }
; 0000 008E        }
;PCODE: $000000CB VOL: 0
; 0000 008F     }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0090 
; 0000 0091    switch (status){
;PCODE: $000000D2 VOL: 0
; 0000 0092        case -1:
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0093             if (key_number[row][column] == '#' || key_number[row][column] == '*'){
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0094                  my_clear(pass_temp);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0095                  status = 0;
;PCODE: $000000E6 VOL: 0
; 0000 0096             }
; 0000 0097        case -2:
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0098             if (key_number[row][column] == '#' || key_number[row][column] == '*'){
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0099                 status = 1;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 009A             }
; 0000 009B        case -3:
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 009C              if (key_number[row][column] == '#' || key_number[row][column] == '*'){
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 009D                 my_clear(pass_temp);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 009E                 my_clear(new_pass);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 009F                 status = 2;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00A0             }
; 0000 00A1        case 0:
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00A2             if (key_number[row][column] == '*'){
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00A3                 // If password matched:
; 0000 00A4                 if (strcmp(pass,pass_temp) == 0){
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00A5                     attempts = 0;
;PCODE: $0000012F VOL: 0
; 0000 00A6                     TIMSK = (0<<OCIE0);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00A7                     countdown = COUNTDOWN_TIME;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00A8                     status = 1;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A9                 } else {
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00AA                     attempts++;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00AB                     if (attempts % 3 == 0){
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AC                         TIMSK = (1<<OCIE0);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00AD                         status = 100;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AE                     } else {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00AF                         snprintf(message,32,"Wrong Pass!     %d Attempts!",3 - attempts);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00B0                         set_msg(message);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00B1                         status = -1;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00B2                     }
;PCODE: $00000159 VOL: 0
; 0000 00B3                 }
;PCODE: $0000015A VOL: 0
; 0000 00B4             } else if (key_number[row][column] == '#'){
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00B5                 clear_one(pass_temp);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00B6             } else {
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00B7                 pass_temp[strlen(pass_temp)] = key_number[row][column];
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00B8             }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00B9             break;
;PCODE: $0000017B VOL: 0
; 0000 00BA       case 1:
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00BB             if (key_number[row][column] == '*'){
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00BC                 my_clear(pass_temp);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00BD                 my_clear(new_pass);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00BE                 status = 2;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00BF             }
; 0000 00C0             break;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00C1       case 2:
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00C2             if (key_number[row][column] == '*'){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00C3                status = 3;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00C4             } else if (key_number[row][column] == '#'){
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00C5                 clear_one(pass_temp);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00C6             } else {
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00C7                 pass_temp[strlen(pass_temp)] = key_number[row][column];
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00C8             }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00C9             break;
;PCODE: $000001C0 VOL: 0
; 0000 00CA       case 3:
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00CB             if (key_number[row][column] == '*'){
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00CC                 if (strcmp(new_pass,pass_temp) == 0){
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00CD                     set_msg("Pass Changed.");
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00CE                     change_pass(new_pass);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00CF                     status = -2;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00D0                 } else {
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 00D1                     set_msg("Not Match!      Try Again!");
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00D2                     status = -3;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00D3                 }
;PCODE: $000001E2 VOL: 0
; 0000 00D4             } else if (key_number[row][column] == '#'){
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00D5                 clear_one(new_pass);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00D6             } else {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00D7                 new_pass[strlen(new_pass)] = key_number[row][column];
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 00D8             }
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00D9             break;
;PCODE: $00000203 VOL: 0
; 0000 00DA        case 5:
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 00DB            if (key_number[row][column] == '*'){
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 00DC                 if (strcmp(pass,pass_temp) == 0){
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 00DD                     status = 1;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00DE                 } else {
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 00DF                     status = -4;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 00E0                     set_msg("Wrong Pass!     Try Again!");
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 00E1                 }
;PCODE: $00000220 VOL: 0
; 0000 00E2             } else if (key_number[row][column] == '#'){
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00E3                 clear_one(pass_temp);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 00E4             } else {
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 00E5                 pass_temp[strlen(pass_temp)] = key_number[row][column];
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 00E6             }
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 00E7             break;
;PCODE: $00000241 VOL: 0
; 0000 00E8     }
;PCODE: $00000242 VOL: 0
; 0000 00E9 
; 0000 00EA     PORTA = 0xF0;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00EB }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0

	.DSEG
_0x45:
	.BYTE 0x44
;
;void main(void) {
; 0000 00ED void main(void) {

	.CSEG
;PCODE: $0000024A VOL: 0
; 0000 00EE 
; 0000 00EF     // Keypad
; 0000 00F0     DDRA = 0x0F;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 00F1     PORTA = 0xF0;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 00F2 
; 0000 00F3     // LCD
; 0000 00F4     DDRC = 0x00;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 00F5     PORTC = 0x00;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 00F6 
; 0000 00F7     // Push button
; 0000 00F8     DDRD = 0x00; // input
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 00F9     PORTD.2 = 1; // pull-up for button
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 00FA 
; 0000 00FB     // Interrupts
; 0000 00FC     GICR |= (1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 00FD     MCUCR = (0<<ISC11) | (1<<ISC10) | (1<<ISC01) | (0<<ISC00); // falling edge for int 0 & any change for int 1
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 00FE     MCUCSR = (0<<ISC2); // falling edge for int 2
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 00FF     GIFR = (1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0100 
; 0000 0101     // Timers
; 0000 0102     TCCR0 = (0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0103     TCNT0 = 0x00;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0104     OCR0 = 0x3B;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0105     TIMSK = 0x00; // turn off all timers flags
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0106 
; 0000 0107     lcd_init(16);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0108     #asm("sei")
;PCODE: $0000026A VOL: 0
	sei
;PCODE: $0000026B VOL: 0
; 0000 0109     while (1){
;PCODE: $0000026C VOL: 0
; 0000 010A 
; 0000 010B         if (status == 100){
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 010C             display_lockdown();
;PCODE: $00000270 VOL: 0
; 0000 010D             continue;
;PCODE: $00000271 VOL: 0
; 0000 010E         }
; 0000 010F 
; 0000 0110         lcd_clear();
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0111         switch (status){
;PCODE: $00000274 VOL: 0
; 0000 0112             case -1:
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0113             case -2:
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0114             case -3:
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0115             case -4:
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0116                  display_msg();
;PCODE: $00000286 VOL: 0
; 0000 0117                  break;
;PCODE: $00000287 VOL: 0
; 0000 0118             case 0:
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0119                 lcd_puts("Enter Password:");
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 011A                 lcd_gotoxy(0,1);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 011B                 lcd_puts(pass_temp);
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 011C                 break;
;PCODE: $00000294 VOL: 0
; 0000 011D             case 1:
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 011E               lcd_puts("Safe Unlocked");
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 011F               break;
;PCODE: $0000029B VOL: 0
; 0000 0120             case 2:
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0121               lcd_puts("Enter New Pass:");
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0122               lcd_gotoxy(0,1);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0123               lcd_puts(pass_temp);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0124               break;
;PCODE: $000002A8 VOL: 0
; 0000 0125             case 3:
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0126               lcd_puts("Pass Again:");
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0127               lcd_gotoxy(0,1);
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0128               lcd_puts(new_pass);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 0129               break;
;PCODE: $000002B5 VOL: 0
; 0000 012A             case 4:
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 012B                 lcd_puts("Safe is Locked.");
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 012C                 break;
;PCODE: $000002BC VOL: 0
; 0000 012D             case 5:
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 012E                 lcd_puts("ALERT!!!");
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 012F                 lcd_gotoxy(0,1);
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0130                 lcd_puts(pass_temp);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0131                 break;
;PCODE: $000002C9 VOL: 0
; 0000 0132         }
;PCODE: $000002CA VOL: 0
; 0000 0133         delay_ms(500);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0134     }
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0135 }
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0

	.DSEG
_0x62:
	.BYTE 0x53
;
;
;void clear_one(char *arr){
; 0000 0138 void clear_one(char *arr){

	.CSEG
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0139     arr[strlen(arr) - 1] = '';
;PCODE: $000002D4 VOL: 0
;	*arr -> Y+0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 013A }
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;
;void my_clear(char *arr){
; 0000 013C void my_clear(char *arr){
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 013D     int i;
; 0000 013E     for(i = 0;i<16;i++)
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;	*arr -> Y+2
;	i -> R16,R17
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 013F         arr[i] = '';
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0140 }
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;
;void change_pass(char new_pass[]){
; 0000 0142 void change_pass(char new_pass[]){
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 0143     int i;
; 0000 0144     my_clear(pass);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;	new_pass -> Y+2
;	i -> R16,R17
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0145     for(i=0;i<16;i++)
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0146         pass[i] = new_pass[i];
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 0147 }
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;
;void display_msg(){
; 0000 0149 void display_msg(){
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 014A     lcd_puts(msg);
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 014B     delay_ms(1000);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 014C 
; 0000 014D     switch (status){
;PCODE: $00000329 VOL: 0
; 0000 014E         case -1:
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 014F             my_clear(pass_temp);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 0150             status = 0;
;PCODE: $0000032E VOL: 0
; 0000 0151             break;
;PCODE: $0000032F VOL: 0
; 0000 0152         case -2:
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0153             status = 1;
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0154             break;
;PCODE: $00000335 VOL: 0
; 0000 0155         case -3:
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0156             my_clear(pass_temp);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0157             my_clear(new_pass);
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 0158             status = 2;
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0159             break;
;PCODE: $0000033F VOL: 0
; 0000 015A         case -4:
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 015B             my_clear(pass_temp);
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 015C             status = 5;
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 015D             break;
;PCODE: $00000347 VOL: 0
; 0000 015E     }
;PCODE: $00000348 VOL: 0
; 0000 015F }
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;
;
;void set_msg(char *message){
; 0000 0162 void set_msg(char *message){
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0163     strncpy(msg, message, 32);
;PCODE: $0000034D VOL: 0
;	*message -> Y+0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 0164 }
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;
;void display_lockdown(){
; 0000 0166 void display_lockdown(){
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 0167     int min,sec;
; 0000 0168     unsigned char time[16];
; 0000 0169     if (!sync) return ;
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;	min -> R16,R17
;	sec -> R18,R19
;	time -> Y+4
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 016A     min = lockdown / 60;
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 016B     sec = lockdown % 60;
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 016C 
; 0000 016D     lcd_clear();
;PCODE: $00000369 VOL: 0
; 0000 016E     lcd_puts("Lock Down for:");
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 016F     lcd_gotoxy(0,1);
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0170     snprintf(time, 9, "%02d:%02d", min, sec);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0171     lcd_puts(time);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0172     sync = 0;
;PCODE: $00000384 VOL: 0
; 0000 0173 }
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0

	.DSEG
_0x77:
	.BYTE 0xF
