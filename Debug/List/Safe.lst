
AVRASM ver. 2.1.30  C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm Sat Jun 27 08:48:34 2020

C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1097): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _sync=R5
                 	.DEF _lockdown=R6
                 	.DEF _lockdown_msb=R7
                 	.DEF _countdown=R8
                 	.DEF _countdown_msb=R9
                 	.DEF _attempts=R10
                 	.DEF _attempts_msb=R11
                 	.DEF _status=R12
                 	.DEF _status_msb=R13
                 	.DEF __lcd_x=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00d2 	JMP  __RESET
000002 940c 0147 	JMP  _ext_int0_isr
000004 940c 0174 	JMP  _ext_int1_isr
000006 940c 018e 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 00ff 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _Key_Pattern:
00002a fdfe
00002b f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _key_number:
00002c 302a
00002d 3723
00002e 3938
00002f 3534      	.DB  0x2A,0x30,0x23,0x37,0x38,0x39,0x34,0x35
000030 3136
000031 3332      	.DB  0x36,0x31,0x32,0x33
                 _tbl10_G102:
000032 2710
000033 03e8
000034 0064
000035 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000036 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000037 1000
000038 0100
000039 0010
00003a 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003b 0a00
00003c 0f00      	.DB  0x0,0xA,0x0,0xF
00003d 0000
00003e 0400      	.DB  0x0,0x0,0x0,0x4
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x0
                 
                 _0x3:
000040 3231
000041 3433      	.DB  0x31,0x32,0x33,0x34
                 _0x0:
000042 7257
000043 6e6f
000044 2067
000045 6150      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x50,0x61
000046 7373
000047 2021
000048 2020
000049 2020      	.DB  0x73,0x73,0x21,0x20,0x20,0x20,0x20,0x20
00004a 6425
00004b 4120
00004c 7474
00004d 6d65      	.DB  0x25,0x64,0x20,0x41,0x74,0x74,0x65,0x6D
00004e 7470
00004f 2173
000050 5000
000051 7361      	.DB  0x70,0x74,0x73,0x21,0x0,0x50,0x61,0x73
000052 2073
000053 6843
000054 6e61
000055 6567      	.DB  0x73,0x20,0x43,0x68,0x61,0x6E,0x67,0x65
000056 2e64
000057 4e00
000058 746f
000059 4d20      	.DB  0x64,0x2E,0x0,0x4E,0x6F,0x74,0x20,0x4D
00005a 7461
00005b 6863
00005c 2021
00005d 2020      	.DB  0x61,0x74,0x63,0x68,0x21,0x20,0x20,0x20
00005e 2020
00005f 5420
000060 7972
000061 4120      	.DB  0x20,0x20,0x20,0x54,0x72,0x79,0x20,0x41
000062 6167
000063 6e69
000064 0021
000065 7257      	.DB  0x67,0x61,0x69,0x6E,0x21,0x0,0x57,0x72
000066 6e6f
000067 2067
000068 6150
000069 7373      	.DB  0x6F,0x6E,0x67,0x20,0x50,0x61,0x73,0x73
00006a 2021
00006b 2020
00006c 2020
00006d 7254      	.DB  0x21,0x20,0x20,0x20,0x20,0x20,0x54,0x72
00006e 2079
00006f 6741
000070 6961
000071 216e      	.DB  0x79,0x20,0x41,0x67,0x61,0x69,0x6E,0x21
000072 4500
000073 746e
000074 7265
000075 5020      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x50
000076 7361
000077 7773
000078 726f
000079 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
00007a 5300
00007b 6661
00007c 2065
00007d 6e55      	.DB  0x0,0x53,0x61,0x66,0x65,0x20,0x55,0x6E
00007e 6f6c
00007f 6b63
000080 6465
000081 4500      	.DB  0x6C,0x6F,0x63,0x6B,0x65,0x64,0x0,0x45
000082 746e
000083 7265
000084 4e20
000085 7765      	.DB  0x6E,0x74,0x65,0x72,0x20,0x4E,0x65,0x77
000086 5020
000087 7361
000088 3a73
000089 5000      	.DB  0x20,0x50,0x61,0x73,0x73,0x3A,0x0,0x50
00008a 7361
00008b 2073
00008c 6741
00008d 6961      	.DB  0x61,0x73,0x73,0x20,0x41,0x67,0x61,0x69
00008e 3a6e
00008f 5300
000090 6661
000091 2065      	.DB  0x6E,0x3A,0x0,0x53,0x61,0x66,0x65,0x20
000092 7369
000093 4c20
000094 636f
000095 656b      	.DB  0x69,0x73,0x20,0x4C,0x6F,0x63,0x6B,0x65
000096 2e64
000097 4100
000098 454c
000099 5452      	.DB  0x64,0x2E,0x0,0x41,0x4C,0x45,0x52,0x54
00009a 2121
00009b 0021
00009c 6f4c
00009d 6b63      	.DB  0x21,0x21,0x21,0x0,0x4C,0x6F,0x63,0x6B
00009e 4420
00009f 776f
0000a0 206e
0000a1 6f66      	.DB  0x20,0x44,0x6F,0x77,0x6E,0x20,0x66,0x6F
0000a2 3a72
0000a3 2500
0000a4 3230
0000a5 3a64      	.DB  0x72,0x3A,0x0,0x25,0x30,0x32,0x64,0x3A
0000a6 3025
0000a7 6432
C:\Users\Dreamer\OneDrive\Desktop\Micro\FinalProject\Debug\List\Safe.asm(1173): warning: .cseg .db misalignment - padding zero byte
0000a8 0000      	.DB  0x25,0x30,0x32,0x64,0x0
                 _0x2000003:
0000a9 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000aa 0009      	.DW  0x09
0000ab 0005      	.DW  0x05
0000ac 0076      	.DW  __REG_VARS*2
                 
0000ad 0004      	.DW  0x04
0000ae 0306      	.DW  _pass
0000af 0080      	.DW  _0x3*2
                 
0000b0 000e      	.DW  0x0E
0000b1 0260      	.DW  _0x45
0000b2 00a1      	.DW  _0x0*2+29
                 
0000b3 001b      	.DW  0x1B
0000b4 026e      	.DW  _0x45+14
0000b5 00af      	.DW  _0x0*2+43
                 
0000b6 001b      	.DW  0x1B
0000b7 0289      	.DW  _0x45+41
0000b8 00ca      	.DW  _0x0*2+70
                 
0000b9 0010      	.DW  0x10
0000ba 02a4      	.DW  _0x62
0000bb 00e5      	.DW  _0x0*2+97
                 
0000bc 000e      	.DW  0x0E
0000bd 02b4      	.DW  _0x62+16
0000be 00f5      	.DW  _0x0*2+113
                 
0000bf 0010      	.DW  0x10
0000c0 02c2      	.DW  _0x62+30
0000c1 0103      	.DW  _0x0*2+127
                 
0000c2 000c      	.DW  0x0C
0000c3 02d2      	.DW  _0x62+46
0000c4 0113      	.DW  _0x0*2+143
                 
0000c5 0010      	.DW  0x10
0000c6 02de      	.DW  _0x62+58
0000c7 011f      	.DW  _0x0*2+155
                 
0000c8 0009      	.DW  0x09
0000c9 02ee      	.DW  _0x62+74
0000ca 012f      	.DW  _0x0*2+171
                 
0000cb 000f      	.DW  0x0F
0000cc 02f7      	.DW  _0x77
0000cd 0138      	.DW  _0x0*2+180
                 
0000ce 0002      	.DW  0x02
0000cf 0356      	.DW  __base_y_G100
0000d0 0152      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000d1 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000d2 94f8      	CLI
0000d3 27ee      	CLR  R30
0000d4 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000d5 e0f1      	LDI  R31,1
0000d6 bffb      	OUT  GICR,R31
0000d7 bfeb      	OUT  GICR,R30
0000d8 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000d9 e08d      	LDI  R24,(14-2)+1
0000da e0a2      	LDI  R26,2
0000db 27bb      	CLR  R27
                 __CLEAR_REG:
0000dc 93ed      	ST   X+,R30
0000dd 958a      	DEC  R24
0000de f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000df e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000e0 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000e1 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000e2 93ed      	ST   X+,R30
0000e3 9701      	SBIW R24,1
0000e4 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000e5 e5e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e6 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e7 9185      	LPM  R24,Z+
0000e8 9195      	LPM  R25,Z+
0000e9 9700      	SBIW R24,0
0000ea f061      	BREQ __GLOBAL_INI_END
0000eb 91a5      	LPM  R26,Z+
0000ec 91b5      	LPM  R27,Z+
0000ed 9005      	LPM  R0,Z+
0000ee 9015      	LPM  R1,Z+
0000ef 01bf      	MOVW R22,R30
0000f0 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000f1 9005      	LPM  R0,Z+
0000f2 920d      	ST   X+,R0
0000f3 9701      	SBIW R24,1
0000f4 f7e1      	BRNE __GLOBAL_INI_LOOP
0000f5 01fb      	MOVW R30,R22
0000f6 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f7 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f8 bfed      	OUT  SPL,R30
0000f9 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000fa bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000fb e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000fc e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000fd 940c 02bb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ;   Digital Safe Lock
                 ;   Mohammad Solki
                 ;   Student ID: 9411412054
                 ;   Email: d4rk@cyberservices.com
                 ;*/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdio.h>
                 ;
                 ;// Config Initial Valuse
                 ;#define DEFULT_PASS "1234"
                 ;#define LOCKDOWN_TIME 10
                 ;#define COUNTDOWN_TIME 15
                 ;
                 ;flash unsigned char Key_Pattern[4]={0xFE, 0xFD, 0xFB, 0xF7};
                 ;flash unsigned char key_number[4][3] ={'*', '0', '#',
                 ;                              '7', '8', '9',
                 ;                              '4', '5', '6',
                 ;                              '1', '2', '3'};
                 ;
                 ;unsigned char pass[16] = DEFULT_PASS;
                 
                 	.DSEG
                 ;unsigned char pass_temp[16];
                 ;unsigned char new_pass[16];
                 ;unsigned char msg[32];
                 ;unsigned char sync = 0;
                 ;int lockdown = LOCKDOWN_TIME;
                 ;int countdown = COUNTDOWN_TIME;
                 ;int attempts = 0;
                 ;int status = 4;
                 ;
                 ;void clear_one(char *);
                 ;void my_clear(char *);
                 ;void change_pass(char []);
                 ;void display_msg();
                 ;void set_msg(char *);
                 ;void display_lockdown(void);
                 ;
                 ;// Timer 0 for lockdown
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void){
                 ; 0000 002B interrupt [11] void timer0_comp_isr(void){
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
0000ff 920a      	ST   -Y,R0
000100 921a      	ST   -Y,R1
000101 939a      	ST   -Y,R25
000102 93aa      	ST   -Y,R26
000103 93ba      	ST   -Y,R27
000104 93ea      	ST   -Y,R30
000105 93fa      	ST   -Y,R31
000106 b7ef      	IN   R30,SREG
000107 93ea      	ST   -Y,R30
                 ; 0000 002C     if (status != 100 && status != 0) return; // just make sure that we are in lockdown or countdown mode
000108 940e 065c 	CALL SUBOPT_0x0
00010a f021      	BREQ _0x5
00010b 2400      	CLR  R0
00010c 140c      	CP   R0,R12
00010d 040d      	CPC  R0,R13
00010e f409      	BRNE _0x6
                 _0x5:
00010f c001      	RJMP _0x4
                 _0x6:
000110 c02c      	RJMP _0x80
                 ; 0000 002D 
                 ; 0000 002E     if (status == 100){
                 _0x4:
000111 940e 065c 	CALL SUBOPT_0x0
000113 f4c1      	BRNE _0x7
                 ; 0000 002F         sync = 1;
000114 e0e1      	LDI  R30,LOW(1)
000115 2e5e      	MOV  R5,R30
                 ; 0000 0030         lockdown--;
000116 01f3      	MOVW R30,R6
000117 9731      	SBIW R30,1
000118 013f      	MOVW R6,R30
                 ; 0000 0031 
                 ; 0000 0032         // exit from lockdown when time is zero
                 ; 0000 0033         if (lockdown == 0) {
000119 2c06      	MOV  R0,R6
00011a 2807      	OR   R0,R7
00011b f479      	BRNE _0x8
                 ; 0000 0034             lockdown = LOCKDOWN_TIME + LOCKDOWN_TIME * (attempts / 3);
00011c 01d5      	MOVW R26,R10
00011d e0e3      	LDI  R30,LOW(3)
00011e e0f0      	LDI  R31,HIGH(3)
00011f 940e 073a 	CALL __DIVW21
000121 e0aa      	LDI  R26,LOW(10)
000122 e0b0      	LDI  R27,HIGH(10)
000123 940e 0722 	CALL __MULW12
000125 963a      	ADIW R30,10
000126 013f      	MOVW R6,R30
                 ; 0000 0035             TIMSK = (0<<OCIE0); // turn off timer 0 interrupt flag
000127 e0e0      	LDI  R30,LOW(0)
000128 bfe9      	OUT  0x39,R30
                 ; 0000 0036             status = 0;
000129 24cc      	CLR  R12
00012a 24dd      	CLR  R13
                 ; 0000 0037         }
                 ; 0000 0038     } else if (status == 0){
                 _0x8:
00012b c011      	RJMP _0x9
                 _0x7:
00012c 2c0c      	MOV  R0,R12
00012d 280d      	OR   R0,R13
00012e f471      	BRNE _0xA
                 ; 0000 0039         countdown--;
00012f 01f4      	MOVW R30,R8
000130 9731      	SBIW R30,1
000131 014f      	MOVW R8,R30
                 ; 0000 003A 
                 ; 0000 003B         // exit from countdown when time is zero
                 ; 0000 003C         if (countdown == 0) {
000132 2c08      	MOV  R0,R8
000133 2809      	OR   R0,R9
000134 f441      	BRNE _0xB
                 ; 0000 003D             countdown = COUNTDOWN_TIME;
000135 e0ef      	LDI  R30,LOW(15)
000136 e0f0      	LDI  R31,HIGH(15)
000137 014f      	MOVW R8,R30
                 ; 0000 003E             TIMSK = (0<<OCIE0); // turn off timer 0 interrupt flag
000138 e0e0      	LDI  R30,LOW(0)
000139 bfe9      	OUT  0x39,R30
                 ; 0000 003F             status = 5;
00013a e0e5      	LDI  R30,LOW(5)
00013b e0f0      	LDI  R31,HIGH(5)
00013c 016f      	MOVW R12,R30
                 ; 0000 0040         }
                 ; 0000 0041     }
                 _0xB:
                 ; 0000 0042 }
                 _0xA:
                 _0x9:
                 _0x80:
00013d 91e9      	LD   R30,Y+
00013e bfef      	OUT  SREG,R30
00013f 91f9      	LD   R31,Y+
000140 91e9      	LD   R30,Y+
000141 91b9      	LD   R27,Y+
000142 91a9      	LD   R26,Y+
000143 9199      	LD   R25,Y+
000144 9019      	LD   R1,Y+
000145 9009      	LD   R0,Y+
000146 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Interrupt 0 for back button
                 ;interrupt [EXT_INT0] void ext_int0_isr(void){
                 ; 0000 0046 interrupt [2] void ext_int0_isr(void){
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000147 940e 0661 	CALL SUBOPT_0x1
                 ; 0000 0047 
                 ; 0000 0048     switch (status){
000149 940e 066f 	CALL SUBOPT_0x2
                 ; 0000 0049         case -1:
00014b f419      	BRNE _0xF
                 ; 0000 004A             my_clear(pass_temp);
00014c 940e 0674 	CALL SUBOPT_0x3
                 ; 0000 004B             status = 0;
                 ; 0000 004C             break;
00014e c024      	RJMP _0xE
                 ; 0000 004D         case -2:
                 _0xF:
00014f 3fee      	CPI  R30,LOW(0xFFFFFFFE)
000150 efaf      	LDI  R26,HIGH(0xFFFFFFFE)
000151 07fa      	CPC  R31,R26
000152 f419      	BRNE _0x10
                 ; 0000 004E             status = 1;
000153 e0e1      	LDI  R30,LOW(1)
000154 e0f0      	LDI  R31,HIGH(1)
000155 c01c      	RJMP _0x78
                 ; 0000 004F             break;
                 ; 0000 0050         case -3:
                 _0x10:
000156 3fed      	CPI  R30,LOW(0xFFFFFFFD)
000157 efaf      	LDI  R26,HIGH(0xFFFFFFFD)
000158 07fa      	CPC  R31,R26
000159 f091      	BREQ _0x79
                 ; 0000 0051             my_clear(pass_temp);
                 ; 0000 0052             my_clear(new_pass);
                 ; 0000 0053             status = 2;
                 ; 0000 0054             break;
                 ; 0000 0055 
                 ; 0000 0056         case 1:
00015a 30e1      	CPI  R30,LOW(0x1)
00015b e0a0      	LDI  R26,HIGH(0x1)
00015c 07fa      	CPC  R31,R26
00015d f419      	BRNE _0x12
                 ; 0000 0057             my_clear(pass_temp);
00015e 940e 0674 	CALL SUBOPT_0x3
                 ; 0000 0058             status = 0;
                 ; 0000 0059             break;
000160 c012      	RJMP _0xE
                 ; 0000 005A         case 2:
                 _0x12:
000161 30e2      	CPI  R30,LOW(0x2)
000162 e0a0      	LDI  R26,HIGH(0x2)
000163 07fa      	CPC  R31,R26
000164 f419      	BRNE _0x13
                 ; 0000 005B             status = 1;
000165 e0e1      	LDI  R30,LOW(1)
000166 e0f0      	LDI  R31,HIGH(1)
000167 c00a      	RJMP _0x78
                 ; 0000 005C             break;
                 ; 0000 005D         case 3:
                 _0x13:
000168 30e3      	CPI  R30,LOW(0x3)
000169 e0a0      	LDI  R26,HIGH(0x3)
00016a 07fa      	CPC  R31,R26
00016b f439      	BRNE _0xE
                 ; 0000 005E             my_clear(pass_temp);
                 _0x79:
00016c e1a6      	LDI  R26,LOW(_pass_temp)
00016d e0b3      	LDI  R27,HIGH(_pass_temp)
00016e 940e 067b 	CALL SUBOPT_0x4
                 ; 0000 005F             my_clear(new_pass);
                 ; 0000 0060             status = 2;
000170 e0e2      	LDI  R30,LOW(2)
000171 e0f0      	LDI  R31,HIGH(2)
                 _0x78:
000172 016f      	MOVW R12,R30
                 ; 0000 0061             break;
                 ; 0000 0062     }
                 _0xE:
                 ; 0000 0063 
                 ; 0000 0064 }
000173 c139      	RJMP _0x7F
                 ; .FEND
                 ;
                 ;// Interrupt 1 for PIR sensor
                 ;interrupt [EXT_INT1] void ext_int1_isr(void){
                 ; 0000 0067 interrupt [3] void ext_int1_isr(void){
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000174 940e 0661 	CALL SUBOPT_0x1
                 ; 0000 0068     if (status == 5) return ;
000176 e0e5      	LDI  R30,LOW(5)
000177 e0f0      	LDI  R31,HIGH(5)
000178 15ec      	CP   R30,R12
000179 05fd      	CPC  R31,R13
00017a f409      	BRNE _0x15
00017b c131      	RJMP _0x7F
                 ; 0000 0069 
                 ; 0000 006A     if (PIND.3 == 1) {
                 _0x15:
00017c 9b83      	SBIS 0x10,3
00017d c005      	RJMP _0x16
                 ; 0000 006B         TIMSK = (1<<OCIE0);
00017e e0e2      	LDI  R30,LOW(2)
00017f bfe9      	OUT  0x39,R30
                 ; 0000 006C         status = 0;
000180 24cc      	CLR  R12
000181 24dd      	CLR  R13
                 ; 0000 006D     } else {
000182 c00a      	RJMP _0x17
                 _0x16:
                 ; 0000 006E         my_clear(pass_temp);
000183 940e 0681 	CALL SUBOPT_0x5
                 ; 0000 006F         my_clear(new_pass);
                 ; 0000 0070         TIMSK = (0<<OCIE0);
000185 e0e0      	LDI  R30,LOW(0)
000186 bfe9      	OUT  0x39,R30
                 ; 0000 0071         countdown = COUNTDOWN_TIME;
000187 e0ef      	LDI  R30,LOW(15)
000188 e0f0      	LDI  R31,HIGH(15)
000189 014f      	MOVW R8,R30
                 ; 0000 0072         status = 4;
00018a e0e4      	LDI  R30,LOW(4)
00018b e0f0      	LDI  R31,HIGH(4)
00018c 016f      	MOVW R12,R30
                 ; 0000 0073     }
                 _0x17:
                 ; 0000 0074 
                 ; 0000 0075 }
00018d c11f      	RJMP _0x7F
                 ; .FEND
                 ;
                 ;// Interrupt 2 for key pad
                 ;interrupt [EXT_INT2] void ext_int2_isr(void){
                 ; 0000 0078 interrupt [4] void ext_int2_isr(void){
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
00018e 940e 0661 	CALL SUBOPT_0x1
                 ; 0000 0079    char row, column = -1, temp;
                 ; 0000 007A    char message[32];
                 ; 0000 007B 
                 ; 0000 007C    for (row=0; row<4; row++){
000190 97a0      	SBIW R28,32
000191 940e 076a 	CALL __SAVELOCR4
                 ;	row -> R17
                 ;	column -> R16
                 ;	temp -> R19
                 ;	message -> Y+4
000193 ef0f      	LDI  R16,255
000194 e010      	LDI  R17,LOW(0)
                 _0x19:
000195 3014      	CPI  R17,4
000196 f4c8      	BRSH _0x1A
                 ; 0000 007D        PORTA = Key_Pattern[row];
000197 2fe1      	MOV  R30,R17
000198 e0f0      	LDI  R31,0
000199 5aec      	SUBI R30,LOW(-_Key_Pattern*2)
00019a 4fff      	SBCI R31,HIGH(-_Key_Pattern*2)
00019b 9004      	LPM  R0,Z
00019c ba0b      	OUT  0x1B,R0
                 ; 0000 007E 
                 ; 0000 007F        temp = PINA;
00019d b339      	IN   R19,25
                 ; 0000 0080        temp = temp & 0xF0;
00019e 7f30      	ANDI R19,LOW(240)
                 ; 0000 0081 
                 ; 0000 0082        if (temp != 0xF0){
00019f 3f30      	CPI  R19,240
0001a0 f069      	BREQ _0x1B
                 ; 0000 0083 
                 ; 0000 0084            if (PINA.5 == 0)
0001a1 9bcd      	SBIS 0x19,5
                 ; 0000 0085               column=0;
0001a2 e000      	LDI  R16,LOW(0)
                 ; 0000 0086            if (PINA.6 == 0)
0001a3 9bce      	SBIS 0x19,6
                 ; 0000 0087               column=1;
0001a4 e001      	LDI  R16,LOW(1)
                 ; 0000 0088            if (PINA.7 == 0)
0001a5 9bcf      	SBIS 0x19,7
                 ; 0000 0089               column=2;
0001a6 e002      	LDI  R16,LOW(2)
                 ; 0000 008A 
                 ; 0000 008B            if (column != -1){
0001a7 2fa0      	MOV  R26,R16
0001a8 efef      	LDI  R30,LOW(255)
0001a9 e0b0      	LDI  R27,0
0001aa efff      	SER  R31
0001ab 17ea      	CP   R30,R26
0001ac 07fb      	CPC  R31,R27
0001ad f411      	BRNE _0x1A
                 ; 0000 008C                break;
                 ; 0000 008D            }
                 ; 0000 008E        }
                 ; 0000 008F     }
                 _0x1B:
0001ae 5f1f      	SUBI R17,-1
0001af cfe5      	RJMP _0x19
                 _0x1A:
                 ; 0000 0090 
                 ; 0000 0091    switch (status){
0001b0 940e 066f 	CALL SUBOPT_0x2
                 ; 0000 0092        case -1:
0001b2 f449      	BRNE _0x23
                 ; 0000 0093             if (key_number[row][column] == '#' || key_number[row][column] == '*'){
0001b3 940e 0684 	CALL SUBOPT_0x6
0001b5 f019      	BREQ _0x25
0001b6 91a4      	LPM  R26,Z
0001b7 32aa      	CPI  R26,LOW(0x2A)
0001b8 f411      	BRNE _0x24
                 _0x25:
                 ; 0000 0094                  my_clear(pass_temp);
0001b9 940e 0674 	CALL SUBOPT_0x3
                 ; 0000 0095                  status = 0;
                 ; 0000 0096             }
                 ; 0000 0097        case -2:
                 _0x24:
0001bb c004      	RJMP _0x27
                 _0x23:
0001bc 3fee      	CPI  R30,LOW(0xFFFFFFFE)
0001bd efaf      	LDI  R26,HIGH(0xFFFFFFFE)
0001be 07fa      	CPC  R31,R26
0001bf f451      	BRNE _0x28
                 _0x27:
                 ; 0000 0098             if (key_number[row][column] == '#' || key_number[row][column] == '*'){
0001c0 940e 0684 	CALL SUBOPT_0x6
0001c2 f019      	BREQ _0x2A
0001c3 91a4      	LPM  R26,Z
0001c4 32aa      	CPI  R26,LOW(0x2A)
0001c5 f419      	BRNE _0x29
                 _0x2A:
                 ; 0000 0099                 status = 1;
0001c6 e0e1      	LDI  R30,LOW(1)
0001c7 e0f0      	LDI  R31,HIGH(1)
0001c8 016f      	MOVW R12,R30
                 ; 0000 009A             }
                 ; 0000 009B        case -3:
                 _0x29:
0001c9 c004      	RJMP _0x2C
                 _0x28:
0001ca 3fed      	CPI  R30,LOW(0xFFFFFFFD)
0001cb efaf      	LDI  R26,HIGH(0xFFFFFFFD)
0001cc 07fa      	CPC  R31,R26
0001cd f461      	BRNE _0x2D
                 _0x2C:
                 ; 0000 009C              if (key_number[row][column] == '#' || key_number[row][column] == '*'){
0001ce 940e 0684 	CALL SUBOPT_0x6
0001d0 f019      	BREQ _0x2F
0001d1 91a4      	LPM  R26,Z
0001d2 32aa      	CPI  R26,LOW(0x2A)
0001d3 f429      	BRNE _0x2E
                 _0x2F:
                 ; 0000 009D                 my_clear(pass_temp);
0001d4 940e 0681 	CALL SUBOPT_0x5
                 ; 0000 009E                 my_clear(new_pass);
                 ; 0000 009F                 status = 2;
0001d6 e0e2      	LDI  R30,LOW(2)
0001d7 e0f0      	LDI  R31,HIGH(2)
0001d8 016f      	MOVW R12,R30
                 ; 0000 00A0             }
                 ; 0000 00A1        case 0:
                 _0x2E:
0001d9 c003      	RJMP _0x31
                 _0x2D:
0001da 9730      	SBIW R30,0
0001db f009      	BREQ PC+2
0001dc c04a      	RJMP _0x32
                 _0x31:
                 ; 0000 00A2             if (key_number[row][column] == '*'){
0001dd 940e 0691 	CALL SUBOPT_0x7
0001df 91a4      	LPM  R26,Z
0001e0 32aa      	CPI  R26,LOW(0x2A)
0001e1 f5c9      	BRNE _0x33
                 ; 0000 00A3                 // If password matched:
                 ; 0000 00A4                 if (strcmp(pass,pass_temp) == 0){
0001e2 940e 069c 	CALL SUBOPT_0x8
0001e4 f451      	BRNE _0x34
                 ; 0000 00A5                     attempts = 0;
0001e5 24aa      	CLR  R10
0001e6 24bb      	CLR  R11
                 ; 0000 00A6                     TIMSK = (0<<OCIE0);
0001e7 e0e0      	LDI  R30,LOW(0)
0001e8 bfe9      	OUT  0x39,R30
                 ; 0000 00A7                     countdown = COUNTDOWN_TIME;
0001e9 e0ef      	LDI  R30,LOW(15)
0001ea e0f0      	LDI  R31,HIGH(15)
0001eb 014f      	MOVW R8,R30
                 ; 0000 00A8                     status = 1;
0001ec e0e1      	LDI  R30,LOW(1)
0001ed e0f0      	LDI  R31,HIGH(1)
0001ee c02a      	RJMP _0x7A
                 ; 0000 00A9                 } else {
                 _0x34:
                 ; 0000 00AA                     attempts++;
0001ef 01f5      	MOVW R30,R10
0001f0 9631      	ADIW R30,1
0001f1 015f      	MOVW R10,R30
                 ; 0000 00AB                     if (attempts % 3 == 0){
0001f2 01d5      	MOVW R26,R10
0001f3 e0e3      	LDI  R30,LOW(3)
0001f4 e0f0      	LDI  R31,HIGH(3)
0001f5 940e 073f 	CALL __MODW21
0001f7 9730      	SBIW R30,0
0001f8 f429      	BRNE _0x36
                 ; 0000 00AC                         TIMSK = (1<<OCIE0);
0001f9 e0e2      	LDI  R30,LOW(2)
0001fa bfe9      	OUT  0x39,R30
                 ; 0000 00AD                         status = 100;
0001fb e6e4      	LDI  R30,LOW(100)
0001fc e0f0      	LDI  R31,HIGH(100)
0001fd c01b      	RJMP _0x7A
                 ; 0000 00AE                     } else {
                 _0x36:
                 ; 0000 00AF                         snprintf(message,32,"Wrong Pass!     %d Attempts!",3 - attempts);
0001fe 01fe      	MOVW R30,R28
0001ff 9634      	ADIW R30,4
000200 93fa      	ST   -Y,R31
000201 93ea      	ST   -Y,R30
000202 e2e0      	LDI  R30,LOW(32)
000203 e0f0      	LDI  R31,HIGH(32)
000204 93fa      	ST   -Y,R31
000205 93ea      	ST   -Y,R30
                +
000206 e8e4     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000207 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000208 93fa      	ST   -Y,R31
000209 93ea      	ST   -Y,R30
00020a e0e3      	LDI  R30,LOW(3)
00020b e0f0      	LDI  R31,HIGH(3)
00020c 19ea      	SUB  R30,R10
00020d 09fb      	SBC  R31,R11
00020e 940e 06a6 	CALL SUBOPT_0x9
000210 e084      	LDI  R24,4
000211 940e 0621 	CALL _snprintf
000213 962a      	ADIW R28,10
                 ; 0000 00B0                         set_msg(message);
000214 01de      	MOVW R26,R28
000215 9614      	ADIW R26,4
000216 d17b      	RCALL _set_msg
                 ; 0000 00B1                         status = -1;
000217 efef      	LDI  R30,LOW(65535)
000218 efff      	LDI  R31,HIGH(65535)
                 _0x7A:
000219 016f      	MOVW R12,R30
                 ; 0000 00B2                     }
                 ; 0000 00B3                 }
                 ; 0000 00B4             } else if (key_number[row][column] == '#'){
00021a c00b      	RJMP _0x38
                 _0x33:
00021b 940e 0684 	CALL SUBOPT_0x6
00021d f419      	BRNE _0x39
                 ; 0000 00B5                 clear_one(pass_temp);
00021e 940e 06ab 	CALL SUBOPT_0xA
                 ; 0000 00B6             } else {
000220 c005      	RJMP _0x3A
                 _0x39:
                 ; 0000 00B7                 pass_temp[strlen(pass_temp)] = key_number[row][column];
000221 940e 06af 	CALL SUBOPT_0xB
000223 91e4      	LPM  R30,Z
000224 01db      	MOVW R26,R22
000225 93ec      	ST   X,R30
                 ; 0000 00B8             }
                 _0x3A:
                 _0x38:
                 ; 0000 00B9             break;
000226 c081      	RJMP _0x22
                 ; 0000 00BA       case 1:
                 _0x32:
000227 30e1      	CPI  R30,LOW(0x1)
000228 e0a0      	LDI  R26,HIGH(0x1)
000229 07fa      	CPC  R31,R26
00022a f459      	BRNE _0x3B
                 ; 0000 00BB             if (key_number[row][column] == '*'){
00022b 940e 0691 	CALL SUBOPT_0x7
00022d 91a4      	LPM  R26,Z
00022e 32aa      	CPI  R26,LOW(0x2A)
00022f f429      	BRNE _0x3C
                 ; 0000 00BC                 my_clear(pass_temp);
000230 940e 0681 	CALL SUBOPT_0x5
                 ; 0000 00BD                 my_clear(new_pass);
                 ; 0000 00BE                 status = 2;
000232 e0e2      	LDI  R30,LOW(2)
000233 e0f0      	LDI  R31,HIGH(2)
000234 016f      	MOVW R12,R30
                 ; 0000 00BF             }
                 ; 0000 00C0             break;
                 _0x3C:
000235 c072      	RJMP _0x22
                 ; 0000 00C1       case 2:
                 _0x3B:
000236 30e2      	CPI  R30,LOW(0x2)
000237 e0a0      	LDI  R26,HIGH(0x2)
000238 07fa      	CPC  R31,R26
000239 f4a9      	BRNE _0x3D
                 ; 0000 00C2             if (key_number[row][column] == '*'){
00023a 940e 0691 	CALL SUBOPT_0x7
00023c 91a4      	LPM  R26,Z
00023d 32aa      	CPI  R26,LOW(0x2A)
00023e f421      	BRNE _0x3E
                 ; 0000 00C3                status = 3;
00023f e0e3      	LDI  R30,LOW(3)
000240 e0f0      	LDI  R31,HIGH(3)
000241 016f      	MOVW R12,R30
                 ; 0000 00C4             } else if (key_number[row][column] == '#'){
000242 c00b      	RJMP _0x3F
                 _0x3E:
000243 940e 0684 	CALL SUBOPT_0x6
000245 f419      	BRNE _0x40
                 ; 0000 00C5                 clear_one(pass_temp);
000246 940e 06ab 	CALL SUBOPT_0xA
                 ; 0000 00C6             } else {
000248 c005      	RJMP _0x41
                 _0x40:
                 ; 0000 00C7                 pass_temp[strlen(pass_temp)] = key_number[row][column];
000249 940e 06af 	CALL SUBOPT_0xB
00024b 91e4      	LPM  R30,Z
00024c 01db      	MOVW R26,R22
00024d 93ec      	ST   X,R30
                 ; 0000 00C8             }
                 _0x41:
                 _0x3F:
                 ; 0000 00C9             break;
00024e c059      	RJMP _0x22
                 ; 0000 00CA       case 3:
                 _0x3D:
00024f 30e3      	CPI  R30,LOW(0x3)
000250 e0a0      	LDI  R26,HIGH(0x3)
000251 07fa      	CPC  R31,R26
000252 f599      	BRNE _0x42
                 ; 0000 00CB             if (key_number[row][column] == '*'){
000253 940e 0691 	CALL SUBOPT_0x7
000255 91a4      	LPM  R26,Z
000256 32aa      	CPI  R26,LOW(0x2A)
000257 f4d1      	BRNE _0x43
                 ; 0000 00CC                 if (strcmp(new_pass,pass_temp) == 0){
000258 e2e6      	LDI  R30,LOW(_new_pass)
000259 e0f3      	LDI  R31,HIGH(_new_pass)
00025a 93fa      	ST   -Y,R31
00025b 93ea      	ST   -Y,R30
00025c e1a6      	LDI  R26,LOW(_pass_temp)
00025d e0b3      	LDI  R27,HIGH(_pass_temp)
00025e 940e 046d 	CALL _strcmp
000260 30e0      	CPI  R30,0
000261 f449      	BRNE _0x44
                 ; 0000 00CD                     set_msg("Pass Changed.");
                +
000262 e6a0     +LDI R26 , LOW ( _0x45 + ( 0 ) )
000263 e0b2     +LDI R27 , HIGH ( _0x45 + ( 0 ) )
                 	__POINTW2MN _0x45,0
000264 d12d      	RCALL _set_msg
                 ; 0000 00CE                     change_pass(new_pass);
000265 e2a6      	LDI  R26,LOW(_new_pass)
000266 e0b3      	LDI  R27,HIGH(_new_pass)
000267 d0e4      	RCALL _change_pass
                 ; 0000 00CF                     status = -2;
000268 efee      	LDI  R30,LOW(65534)
000269 efff      	LDI  R31,HIGH(65534)
00026a c005      	RJMP _0x7B
                 ; 0000 00D0                 } else {
                 _0x44:
                 ; 0000 00D1                     set_msg("Not Match!      Try Again!");
                +
00026b e6ae     +LDI R26 , LOW ( _0x45 + ( 14 ) )
00026c e0b2     +LDI R27 , HIGH ( _0x45 + ( 14 ) )
                 	__POINTW2MN _0x45,14
00026d d124      	RCALL _set_msg
                 ; 0000 00D2                     status = -3;
00026e efed      	LDI  R30,LOW(65533)
00026f efff      	LDI  R31,HIGH(65533)
                 _0x7B:
000270 016f      	MOVW R12,R30
                 ; 0000 00D3                 }
                 ; 0000 00D4             } else if (key_number[row][column] == '#'){
000271 c013      	RJMP _0x47
                 _0x43:
000272 940e 0684 	CALL SUBOPT_0x6
000274 f421      	BRNE _0x48
                 ; 0000 00D5                 clear_one(new_pass);
000275 e2a6      	LDI  R26,LOW(_new_pass)
000276 e0b3      	LDI  R27,HIGH(_new_pass)
000277 d0b3      	RCALL _clear_one
                 ; 0000 00D6             } else {
000278 c00c      	RJMP _0x49
                 _0x48:
                 ; 0000 00D7                 new_pass[strlen(new_pass)] = key_number[row][column];
000279 e2a6      	LDI  R26,LOW(_new_pass)
00027a e0b3      	LDI  R27,HIGH(_new_pass)
00027b 940e 0481 	CALL _strlen
00027d 5dea      	SUBI R30,LOW(-_new_pass)
00027e 4ffc      	SBCI R31,HIGH(-_new_pass)
00027f 01bf      	MOVW R22,R30
000280 940e 0691 	CALL SUBOPT_0x7
000282 91e4      	LPM  R30,Z
000283 01db      	MOVW R26,R22
000284 93ec      	ST   X,R30
                 ; 0000 00D8             }
                 _0x49:
                 _0x47:
                 ; 0000 00D9             break;
000285 c022      	RJMP _0x22
                 ; 0000 00DA        case 5:
                 _0x42:
000286 30e5      	CPI  R30,LOW(0x5)
000287 e0a0      	LDI  R26,HIGH(0x5)
000288 07fa      	CPC  R31,R26
000289 f4f1      	BRNE _0x22
                 ; 0000 00DB            if (key_number[row][column] == '*'){
00028a 940e 0691 	CALL SUBOPT_0x7
00028c 91a4      	LPM  R26,Z
00028d 32aa      	CPI  R26,LOW(0x2A)
00028e f471      	BRNE _0x4B
                 ; 0000 00DC                 if (strcmp(pass,pass_temp) == 0){
00028f 940e 069c 	CALL SUBOPT_0x8
000291 f421      	BRNE _0x4C
                 ; 0000 00DD                     status = 1;
000292 e0e1      	LDI  R30,LOW(1)
000293 e0f0      	LDI  R31,HIGH(1)
000294 016f      	MOVW R12,R30
                 ; 0000 00DE                 } else {
000295 c006      	RJMP _0x4D
                 _0x4C:
                 ; 0000 00DF                     status = -4;
000296 efec      	LDI  R30,LOW(65532)
000297 efff      	LDI  R31,HIGH(65532)
000298 016f      	MOVW R12,R30
                 ; 0000 00E0                     set_msg("Wrong Pass!     Try Again!");
                +
000299 e8a9     +LDI R26 , LOW ( _0x45 + ( 41 ) )
00029a e0b2     +LDI R27 , HIGH ( _0x45 + ( 41 ) )
                 	__POINTW2MN _0x45,41
00029b d0f6      	RCALL _set_msg
                 ; 0000 00E1                 }
                 _0x4D:
                 ; 0000 00E2             } else if (key_number[row][column] == '#'){
00029c c00b      	RJMP _0x4E
                 _0x4B:
00029d 940e 0684 	CALL SUBOPT_0x6
00029f f419      	BRNE _0x4F
                 ; 0000 00E3                 clear_one(pass_temp);
0002a0 940e 06ab 	CALL SUBOPT_0xA
                 ; 0000 00E4             } else {
0002a2 c005      	RJMP _0x50
                 _0x4F:
                 ; 0000 00E5                 pass_temp[strlen(pass_temp)] = key_number[row][column];
0002a3 940e 06af 	CALL SUBOPT_0xB
0002a5 91e4      	LPM  R30,Z
0002a6 01db      	MOVW R26,R22
0002a7 93ec      	ST   X,R30
                 ; 0000 00E6             }
                 _0x50:
                 _0x4E:
                 ; 0000 00E7             break;
                 ; 0000 00E8     }
                 _0x22:
                 ; 0000 00E9 
                 ; 0000 00EA     PORTA = 0xF0;
0002a8 efe0      	LDI  R30,LOW(240)
0002a9 bbeb      	OUT  0x1B,R30
                 ; 0000 00EB }
0002aa 940e 0771 	CALL __LOADLOCR4
0002ac 96a4      	ADIW R28,36
                 _0x7F:
0002ad 91e9      	LD   R30,Y+
0002ae bfef      	OUT  SREG,R30
0002af 91f9      	LD   R31,Y+
0002b0 91e9      	LD   R30,Y+
0002b1 91b9      	LD   R27,Y+
0002b2 91a9      	LD   R26,Y+
0002b3 9199      	LD   R25,Y+
0002b4 9189      	LD   R24,Y+
0002b5 9179      	LD   R23,Y+
0002b6 9169      	LD   R22,Y+
0002b7 90f9      	LD   R15,Y+
0002b8 9019      	LD   R1,Y+
0002b9 9009      	LD   R0,Y+
0002ba 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x45:
000260           	.BYTE 0x44
                 ;
                 ;void main(void) {
                 ; 0000 00ED void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 00EE 
                 ; 0000 00EF     // Keypad
                 ; 0000 00F0     DDRA = 0x0F;
0002bb e0ef      	LDI  R30,LOW(15)
0002bc bbea      	OUT  0x1A,R30
                 ; 0000 00F1     PORTA = 0xF0;
0002bd efe0      	LDI  R30,LOW(240)
0002be bbeb      	OUT  0x1B,R30
                 ; 0000 00F2 
                 ; 0000 00F3     // LCD
                 ; 0000 00F4     DDRC = 0x00;
0002bf e0e0      	LDI  R30,LOW(0)
0002c0 bbe4      	OUT  0x14,R30
                 ; 0000 00F5     PORTC = 0x00;
0002c1 bbe5      	OUT  0x15,R30
                 ; 0000 00F6 
                 ; 0000 00F7     // Push button
                 ; 0000 00F8     DDRD = 0x00; // input
0002c2 bbe1      	OUT  0x11,R30
                 ; 0000 00F9     PORTD.2 = 1; // pull-up for button
0002c3 9a92      	SBI  0x12,2
                 ; 0000 00FA 
                 ; 0000 00FB     // Interrupts
                 ; 0000 00FC     GICR |= (1<<INT1) | (1<<INT0) | (1<<INT2);
0002c4 b7eb      	IN   R30,0x3B
0002c5 6ee0      	ORI  R30,LOW(0xE0)
0002c6 bfeb      	OUT  0x3B,R30
                 ; 0000 00FD     MCUCR = (0<<ISC11) | (1<<ISC10) | (1<<ISC01) | (0<<ISC00); // falling edge for int 0 & any change for int 1
0002c7 e0e6      	LDI  R30,LOW(6)
0002c8 bfe5      	OUT  0x35,R30
                 ; 0000 00FE     MCUCSR = (0<<ISC2); // falling edge for int 2
0002c9 e0e0      	LDI  R30,LOW(0)
0002ca bfe4      	OUT  0x34,R30
                 ; 0000 00FF     GIFR = (1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0002cb eee0      	LDI  R30,LOW(224)
0002cc bfea      	OUT  0x3A,R30
                 ; 0000 0100 
                 ; 0000 0101     // Timers
                 ; 0000 0102     TCCR0 = (0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (1<<CS01) | (1<<CS00);
0002cd e0ef      	LDI  R30,LOW(15)
0002ce bfe3      	OUT  0x33,R30
                 ; 0000 0103     TCNT0 = 0x00;
0002cf e0e0      	LDI  R30,LOW(0)
0002d0 bfe2      	OUT  0x32,R30
                 ; 0000 0104     OCR0 = 0x3B;
0002d1 e3eb      	LDI  R30,LOW(59)
0002d2 bfec      	OUT  0x3C,R30
                 ; 0000 0105     TIMSK = 0x00; // turn off all timers flags
0002d3 e0e0      	LDI  R30,LOW(0)
0002d4 bfe9      	OUT  0x39,R30
                 ; 0000 0106 
                 ; 0000 0107     lcd_init(16);
0002d5 e1a0      	LDI  R26,LOW(16)
0002d6 940e 043f 	CALL _lcd_init
                 ; 0000 0108     #asm("sei")
0002d8 9478      	sei
                 ; 0000 0109     while (1){
                 _0x53:
                 ; 0000 010A 
                 ; 0000 010B         if (status == 100){
0002d9 940e 065c 	CALL SUBOPT_0x0
0002db f411      	BRNE _0x56
                 ; 0000 010C             display_lockdown();
0002dc d0c3      	RCALL _display_lockdown
                 ; 0000 010D             continue;
0002dd cffb      	RJMP _0x53
                 ; 0000 010E         }
                 ; 0000 010F 
                 ; 0000 0110         lcd_clear();
                 _0x56:
0002de d128      	RCALL _lcd_clear
                 ; 0000 0111         switch (status){
0002df 940e 066f 	CALL SUBOPT_0x2
                 ; 0000 0112             case -1:
0002e1 f021      	BREQ _0x5B
                 ; 0000 0113             case -2:
0002e2 3fee      	CPI  R30,LOW(0xFFFFFFFE)
0002e3 efaf      	LDI  R26,HIGH(0xFFFFFFFE)
0002e4 07fa      	CPC  R31,R26
0002e5 f409      	BRNE _0x5C
                 _0x5B:
                 ; 0000 0114             case -3:
0002e6 c004      	RJMP _0x5D
                 _0x5C:
0002e7 3fed      	CPI  R30,LOW(0xFFFFFFFD)
0002e8 efaf      	LDI  R26,HIGH(0xFFFFFFFD)
0002e9 07fa      	CPC  R31,R26
0002ea f409      	BRNE _0x5E
                 _0x5D:
                 ; 0000 0115             case -4:
0002eb c004      	RJMP _0x5F
                 _0x5E:
0002ec 3fec      	CPI  R30,LOW(0xFFFFFFFC)
0002ed efaf      	LDI  R26,HIGH(0xFFFFFFFC)
0002ee 07fa      	CPC  R31,R26
0002ef f411      	BRNE _0x60
                 _0x5F:
                 ; 0000 0116                  display_msg();
0002f0 d079      	RCALL _display_msg
                 ; 0000 0117                  break;
0002f1 c033      	RJMP _0x59
                 ; 0000 0118             case 0:
                 _0x60:
0002f2 9730      	SBIW R30,0
0002f3 f419      	BRNE _0x61
                 ; 0000 0119                 lcd_puts("Enter Password:");
                +
0002f4 eaa4     +LDI R26 , LOW ( _0x62 + ( 0 ) )
0002f5 e0b2     +LDI R27 , HIGH ( _0x62 + ( 0 ) )
                 	__POINTW2MN _0x62,0
0002f6 c026      	RJMP _0x7C
                 ; 0000 011A                 lcd_gotoxy(0,1);
                 ; 0000 011B                 lcd_puts(pass_temp);
                 ; 0000 011C                 break;
                 ; 0000 011D             case 1:
                 _0x61:
0002f7 30e1      	CPI  R30,LOW(0x1)
0002f8 e0a0      	LDI  R26,HIGH(0x1)
0002f9 07fa      	CPC  R31,R26
0002fa f419      	BRNE _0x63
                 ; 0000 011E               lcd_puts("Safe Unlocked");
                +
0002fb eba4     +LDI R26 , LOW ( _0x62 + ( 16 ) )
0002fc e0b2     +LDI R27 , HIGH ( _0x62 + ( 16 ) )
                 	__POINTW2MN _0x62,16
0002fd c026      	RJMP _0x7D
                 ; 0000 011F               break;
                 ; 0000 0120             case 2:
                 _0x63:
0002fe 30e2      	CPI  R30,LOW(0x2)
0002ff e0a0      	LDI  R26,HIGH(0x2)
000300 07fa      	CPC  R31,R26
000301 f419      	BRNE _0x64
                 ; 0000 0121               lcd_puts("Enter New Pass:");
                +
000302 eca2     +LDI R26 , LOW ( _0x62 + ( 30 ) )
000303 e0b2     +LDI R27 , HIGH ( _0x62 + ( 30 ) )
                 	__POINTW2MN _0x62,30
000304 c018      	RJMP _0x7C
                 ; 0000 0122               lcd_gotoxy(0,1);
                 ; 0000 0123               lcd_puts(pass_temp);
                 ; 0000 0124               break;
                 ; 0000 0125             case 3:
                 _0x64:
000305 30e3      	CPI  R30,LOW(0x3)
000306 e0a0      	LDI  R26,HIGH(0x3)
000307 07fa      	CPC  R31,R26
000308 f439      	BRNE _0x65
                 ; 0000 0126               lcd_puts("Pass Again:");
                +
000309 eda2     +LDI R26 , LOW ( _0x62 + ( 46 ) )
00030a e0b2     +LDI R27 , HIGH ( _0x62 + ( 46 ) )
                 	__POINTW2MN _0x62,46
00030b 940e 06b7 	CALL SUBOPT_0xC
                 ; 0000 0127               lcd_gotoxy(0,1);
                 ; 0000 0128               lcd_puts(new_pass);
00030d e2a6      	LDI  R26,LOW(_new_pass)
00030e e0b3      	LDI  R27,HIGH(_new_pass)
00030f c014      	RJMP _0x7D
                 ; 0000 0129               break;
                 ; 0000 012A             case 4:
                 _0x65:
000310 30e4      	CPI  R30,LOW(0x4)
000311 e0a0      	LDI  R26,HIGH(0x4)
000312 07fa      	CPC  R31,R26
000313 f419      	BRNE _0x66
                 ; 0000 012B                 lcd_puts("Safe is Locked.");
                +
000314 edae     +LDI R26 , LOW ( _0x62 + ( 58 ) )
000315 e0b2     +LDI R27 , HIGH ( _0x62 + ( 58 ) )
                 	__POINTW2MN _0x62,58
000316 c00d      	RJMP _0x7D
                 ; 0000 012C                 break;
                 ; 0000 012D             case 5:
                 _0x66:
000317 30e5      	CPI  R30,LOW(0x5)
000318 e0a0      	LDI  R26,HIGH(0x5)
000319 07fa      	CPC  R31,R26
00031a f451      	BRNE _0x59
                 ; 0000 012E                 lcd_puts("ALERT!!!");
                +
00031b eeae     +LDI R26 , LOW ( _0x62 + ( 74 ) )
00031c e0b2     +LDI R27 , HIGH ( _0x62 + ( 74 ) )
                 	__POINTW2MN _0x62,74
                 _0x7C:
00031d d110      	RCALL _lcd_puts
                 ; 0000 012F                 lcd_gotoxy(0,1);
00031e e0e0      	LDI  R30,LOW(0)
00031f 93ea      	ST   -Y,R30
000320 e0a1      	LDI  R26,LOW(1)
000321 d0d6      	RCALL _lcd_gotoxy
                 ; 0000 0130                 lcd_puts(pass_temp);
000322 e1a6      	LDI  R26,LOW(_pass_temp)
000323 e0b3      	LDI  R27,HIGH(_pass_temp)
                 _0x7D:
000324 d109      	RCALL _lcd_puts
                 ; 0000 0131                 break;
                 ; 0000 0132         }
                 _0x59:
                 ; 0000 0133         delay_ms(500);
000325 efa4      	LDI  R26,LOW(500)
000326 e0b1      	LDI  R27,HIGH(500)
000327 940e 0703 	CALL _delay_ms
                 ; 0000 0134     }
000329 cfaf      	RJMP _0x53
                 ; 0000 0135 }
                 _0x68:
00032a cfff      	RJMP _0x68
                 ; .FEND
                 
                 	.DSEG
                 _0x62:
0002a4           	.BYTE 0x53
                 ;
                 ;
                 ;void clear_one(char *arr){
                 ; 0000 0138 void clear_one(char *arr){
                 
                 	.CSEG
                 _clear_one:
                 ; .FSTART _clear_one
                 ; 0000 0139     arr[strlen(arr) - 1] = '';
00032b 93ba      	ST   -Y,R27
00032c 93aa      	ST   -Y,R26
                 ;	*arr -> Y+0
00032d 81a8      	LD   R26,Y
00032e 81b9      	LDD  R27,Y+1
00032f 940e 0481 	CALL _strlen
000331 9731      	SBIW R30,1
000332 81a8      	LD   R26,Y
000333 81b9      	LDD  R27,Y+1
000334 0fae      	ADD  R26,R30
000335 1fbf      	ADC  R27,R31
000336 e0e0      	LDI  R30,LOW(0)
000337 93ec      	ST   X,R30
                 ; 0000 013A }
000338 c0cc      	RJMP _0x2080004
                 ; .FEND
                 ;
                 ;void my_clear(char *arr){
                 ; 0000 013C void my_clear(char *arr){
                 _my_clear:
                 ; .FSTART _my_clear
                 ; 0000 013D     int i;
                 ; 0000 013E     for(i = 0;i<16;i++)
000339 940e 06be 	CALL SUBOPT_0xD
                 ;	*arr -> Y+2
                 ;	i -> R16,R17
                +
00033b e000     +LDI R16 , LOW ( 0 )
00033c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6A:
                +
00033d 3100     +CPI R16 , LOW ( 16 )
00033e e0e0     +LDI R30 , HIGH ( 16 )
00033f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
000340 f454      	BRGE _0x6B
                 ; 0000 013F         arr[i] = '';
000341 01f8      	MOVW R30,R16
000342 81aa      	LDD  R26,Y+2
000343 81bb      	LDD  R27,Y+2+1
000344 0fae      	ADD  R26,R30
000345 1fbf      	ADC  R27,R31
000346 e0e0      	LDI  R30,LOW(0)
000347 93ec      	ST   X,R30
                +
000348 5f0f     +SUBI R16 , LOW ( - 1 )
000349 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00034a cff2      	RJMP _0x6A
                 _0x6B:
                 ; 0000 0140 }
00034b c01a      	RJMP _0x2080005
                 ; .FEND
                 ;
                 ;void change_pass(char new_pass[]){
                 ; 0000 0142 void change_pass(char new_pass[]){
                 _change_pass:
                 ; .FSTART _change_pass
                 ; 0000 0143     int i;
                 ; 0000 0144     my_clear(pass);
00034c 940e 06be 	CALL SUBOPT_0xD
                 ;	new_pass -> Y+2
                 ;	i -> R16,R17
00034e e0a6      	LDI  R26,LOW(_pass)
00034f e0b3      	LDI  R27,HIGH(_pass)
000350 dfe8      	RCALL _my_clear
                 ; 0000 0145     for(i=0;i<16;i++)
                +
000351 e000     +LDI R16 , LOW ( 0 )
000352 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6D:
                +
000353 3100     +CPI R16 , LOW ( 16 )
000354 e0e0     +LDI R30 , HIGH ( 16 )
000355 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
000356 f47c      	BRGE _0x6E
                 ; 0000 0146         pass[i] = new_pass[i];
000357 01f8      	MOVW R30,R16
000358 5fea      	SUBI R30,LOW(-_pass)
000359 4ffc      	SBCI R31,HIGH(-_pass)
00035a 010f      	MOVW R0,R30
00035b 01f8      	MOVW R30,R16
00035c 81aa      	LDD  R26,Y+2
00035d 81bb      	LDD  R27,Y+2+1
00035e 0fae      	ADD  R26,R30
00035f 1fbf      	ADC  R27,R31
000360 91ec      	LD   R30,X
000361 01d0      	MOVW R26,R0
000362 93ec      	ST   X,R30
                +
000363 5f0f     +SUBI R16 , LOW ( - 1 )
000364 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000365 cfed      	RJMP _0x6D
                 _0x6E:
                 ; 0000 0147 }
                 _0x2080005:
000366 8119      	LDD  R17,Y+1
000367 8108      	LDD  R16,Y+0
000368 9624      	ADIW R28,4
000369 9508      	RET
                 ; .FEND
                 ;
                 ;void display_msg(){
                 ; 0000 0149 void display_msg(){
                 _display_msg:
                 ; .FSTART _display_msg
                 ; 0000 014A     lcd_puts(msg);
00036a e3a6      	LDI  R26,LOW(_msg)
00036b e0b3      	LDI  R27,HIGH(_msg)
00036c d0c1      	RCALL _lcd_puts
                 ; 0000 014B     delay_ms(1000);
00036d eea8      	LDI  R26,LOW(1000)
00036e e0b3      	LDI  R27,HIGH(1000)
00036f 940e 0703 	CALL _delay_ms
                 ; 0000 014C 
                 ; 0000 014D     switch (status){
000371 940e 066f 	CALL SUBOPT_0x2
                 ; 0000 014E         case -1:
000373 f419      	BRNE _0x72
                 ; 0000 014F             my_clear(pass_temp);
000374 940e 0674 	CALL SUBOPT_0x3
                 ; 0000 0150             status = 0;
                 ; 0000 0151             break;
000376 c01a      	RJMP _0x71
                 ; 0000 0152         case -2:
                 _0x72:
000377 3fee      	CPI  R30,LOW(0xFFFFFFFE)
000378 efaf      	LDI  R26,HIGH(0xFFFFFFFE)
000379 07fa      	CPC  R31,R26
00037a f419      	BRNE _0x73
                 ; 0000 0153             status = 1;
00037b e0e1      	LDI  R30,LOW(1)
00037c e0f0      	LDI  R31,HIGH(1)
00037d c012      	RJMP _0x7E
                 ; 0000 0154             break;
                 ; 0000 0155         case -3:
                 _0x73:
00037e 3fed      	CPI  R30,LOW(0xFFFFFFFD)
00037f efaf      	LDI  R26,HIGH(0xFFFFFFFD)
000380 07fa      	CPC  R31,R26
000381 f429      	BRNE _0x74
                 ; 0000 0156             my_clear(pass_temp);
000382 940e 0681 	CALL SUBOPT_0x5
                 ; 0000 0157             my_clear(new_pass);
                 ; 0000 0158             status = 2;
000384 e0e2      	LDI  R30,LOW(2)
000385 e0f0      	LDI  R31,HIGH(2)
000386 c009      	RJMP _0x7E
                 ; 0000 0159             break;
                 ; 0000 015A         case -4:
                 _0x74:
000387 3fec      	CPI  R30,LOW(0xFFFFFFFC)
000388 efaf      	LDI  R26,HIGH(0xFFFFFFFC)
000389 07fa      	CPC  R31,R26
00038a f431      	BRNE _0x71
                 ; 0000 015B             my_clear(pass_temp);
00038b e1a6      	LDI  R26,LOW(_pass_temp)
00038c e0b3      	LDI  R27,HIGH(_pass_temp)
00038d dfab      	RCALL _my_clear
                 ; 0000 015C             status = 5;
00038e e0e5      	LDI  R30,LOW(5)
00038f e0f0      	LDI  R31,HIGH(5)
                 _0x7E:
000390 016f      	MOVW R12,R30
                 ; 0000 015D             break;
                 ; 0000 015E     }
                 _0x71:
                 ; 0000 015F }
000391 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void set_msg(char *message){
                 ; 0000 0162 void set_msg(char *message){
                 _set_msg:
                 ; .FSTART _set_msg
                 ; 0000 0163     strncpy(msg, message, 32);
000392 93ba      	ST   -Y,R27
000393 93aa      	ST   -Y,R26
                 ;	*message -> Y+0
000394 e3e6      	LDI  R30,LOW(_msg)
000395 e0f3      	LDI  R31,HIGH(_msg)
000396 93fa      	ST   -Y,R31
000397 93ea      	ST   -Y,R30
000398 81ea      	LDD  R30,Y+2
000399 81fb      	LDD  R31,Y+2+1
00039a 93fa      	ST   -Y,R31
00039b 93ea      	ST   -Y,R30
00039c e2a0      	LDI  R26,LOW(32)
00039d 940e 049a 	CALL _strncpy
                 ; 0000 0164 }
00039f c065      	RJMP _0x2080004
                 ; .FEND
                 ;
                 ;void display_lockdown(){
                 ; 0000 0166 void display_lockdown(){
                 _display_lockdown:
                 ; .FSTART _display_lockdown
                 ; 0000 0167     int min,sec;
                 ; 0000 0168     unsigned char time[16];
                 ; 0000 0169     if (!sync) return ;
0003a0 9760      	SBIW R28,16
0003a1 940e 076a 	CALL __SAVELOCR4
                 ;	min -> R16,R17
                 ;	sec -> R18,R19
                 ;	time -> Y+4
0003a3 2055      	TST  R5
0003a4 f421      	BRNE _0x76
0003a5 940e 0771 	CALL __LOADLOCR4
0003a7 940c 061f 	JMP  _0x2080002
                 ; 0000 016A     min = lockdown / 60;
                 _0x76:
0003a9 01d3      	MOVW R26,R6
0003aa e3ec      	LDI  R30,LOW(60)
0003ab e0f0      	LDI  R31,HIGH(60)
0003ac 940e 073a 	CALL __DIVW21
0003ae 018f      	MOVW R16,R30
                 ; 0000 016B     sec = lockdown % 60;
0003af 01d3      	MOVW R26,R6
0003b0 e3ec      	LDI  R30,LOW(60)
0003b1 e0f0      	LDI  R31,HIGH(60)
0003b2 940e 073f 	CALL __MODW21
0003b4 019f      	MOVW R18,R30
                 ; 0000 016C 
                 ; 0000 016D     lcd_clear();
0003b5 d051      	RCALL _lcd_clear
                 ; 0000 016E     lcd_puts("Lock Down for:");
                +
0003b6 efa7     +LDI R26 , LOW ( _0x77 + ( 0 ) )
0003b7 e0b2     +LDI R27 , HIGH ( _0x77 + ( 0 ) )
                 	__POINTW2MN _0x77,0
0003b8 940e 06b7 	CALL SUBOPT_0xC
                 ; 0000 016F     lcd_gotoxy(0,1);
                 ; 0000 0170     snprintf(time, 9, "%02d:%02d", min, sec);
0003ba 01fe      	MOVW R30,R28
0003bb 9634      	ADIW R30,4
0003bc 93fa      	ST   -Y,R31
0003bd 93ea      	ST   -Y,R30
0003be e0e9      	LDI  R30,LOW(9)
0003bf e0f0      	LDI  R31,HIGH(9)
0003c0 93fa      	ST   -Y,R31
0003c1 93ea      	ST   -Y,R30
                +
0003c2 e4e7     +LDI R30 , LOW ( 2 * _0x0 + ( 195 ) )
0003c3 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 195 ) )
                 	__POINTW1FN _0x0,195
0003c4 93fa      	ST   -Y,R31
0003c5 93ea      	ST   -Y,R30
0003c6 01f8      	MOVW R30,R16
0003c7 940e 06a6 	CALL SUBOPT_0x9
0003c9 01f9      	MOVW R30,R18
0003ca 940e 06a6 	CALL SUBOPT_0x9
0003cc e088      	LDI  R24,8
0003cd 940e 0621 	CALL _snprintf
0003cf 962e      	ADIW R28,14
                 ; 0000 0171     lcd_puts(time);
0003d0 01de      	MOVW R26,R28
0003d1 9614      	ADIW R26,4
0003d2 d05b      	RCALL _lcd_puts
                 ; 0000 0172     sync = 0;
0003d3 2455      	CLR  R5
                 ; 0000 0173 }
0003d4 940e 0771 	CALL __LOADLOCR4
0003d6 940c 061f 	JMP  _0x2080002
                 ; .FEND
                 
                 	.DSEG
                 _0x77:
0002f7           	.BYTE 0xF
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0003d8 93aa      	ST   -Y,R26
0003d9 b3e5      	IN   R30,0x15
0003da 70ef      	ANDI R30,LOW(0xF)
0003db 2fae      	MOV  R26,R30
0003dc 81e8      	LD   R30,Y
0003dd 7fe0      	ANDI R30,LOW(0xF0)
0003de 2bea      	OR   R30,R26
0003df bbe5      	OUT  0x15,R30
                +
0003e0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003e1 958a     +DEC R24
0003e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003e3 9aaa      	SBI  0x15,2
                +
0003e4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003e5 958a     +DEC R24
0003e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003e7 98aa      	CBI  0x15,2
                +
0003e8 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003e9 958a     +DEC R24
0003ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003eb c07f      	RJMP _0x2080003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003ec 93aa      	ST   -Y,R26
0003ed 81a8      	LD   R26,Y
0003ee dfe9      	RCALL __lcd_write_nibble_G100
0003ef 81e8          ld    r30,y
0003f0 95e2          swap  r30
0003f1 83e8          st    y,r30
0003f2 81a8      	LD   R26,Y
0003f3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0003f4 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0003f5 958a     +DEC R24
0003f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0003f7 c073      	RJMP _0x2080003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003f8 93aa      	ST   -Y,R26
0003f9 81e8      	LD   R30,Y
0003fa e0f0      	LDI  R31,0
0003fb 5aea      	SUBI R30,LOW(-__base_y_G100)
0003fc 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0003fd 81e0      	LD   R30,Z
0003fe 81a9      	LDD  R26,Y+1
0003ff 0fae      	ADD  R26,R30
000400 dfeb      	RCALL __lcd_write_data
000401 8049      	LDD  R4,Y+1
000402 81e8      	LD   R30,Y
000403 93e0 035a 	STS  __lcd_y,R30
                 _0x2080004:
000405 9622      	ADIW R28,2
000406 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000407 e0a2      	LDI  R26,LOW(2)
000408 940e 06c3 	CALL SUBOPT_0xE
00040a e0ac      	LDI  R26,LOW(12)
00040b dfe0      	RCALL __lcd_write_data
00040c e0a1      	LDI  R26,LOW(1)
00040d 940e 06c3 	CALL SUBOPT_0xE
00040f e0e0      	LDI  R30,LOW(0)
000410 93e0 035a 	STS  __lcd_y,R30
000412 2e4e      	MOV  R4,R30
000413 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000414 93aa      	ST   -Y,R26
000415 81a8      	LD   R26,Y
000416 30aa      	CPI  R26,LOW(0xA)
000417 f021      	BREQ _0x2000005
000418 91e0 035b 	LDS  R30,__lcd_maxx
00041a 164e      	CP   R4,R30
00041b f060      	BRLO _0x2000004
                 _0x2000005:
00041c e0e0      	LDI  R30,LOW(0)
00041d 93ea      	ST   -Y,R30
00041e 91a0 035a 	LDS  R26,__lcd_y
000420 5faf      	SUBI R26,-LOW(1)
000421 93a0 035a 	STS  __lcd_y,R26
000423 dfd4      	RCALL _lcd_gotoxy
000424 81a8      	LD   R26,Y
000425 30aa      	CPI  R26,LOW(0xA)
000426 f409      	BRNE _0x2000007
000427 c043      	RJMP _0x2080003
                 _0x2000007:
                 _0x2000004:
000428 9443      	INC  R4
000429 9aa8      	SBI  0x15,0
00042a 81a8      	LD   R26,Y
00042b dfc0      	RCALL __lcd_write_data
00042c 98a8      	CBI  0x15,0
00042d c03d      	RJMP _0x2080003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00042e 93ba      	ST   -Y,R27
00042f 93aa      	ST   -Y,R26
000430 931a      	ST   -Y,R17
                 _0x2000008:
000431 81a9      	LDD  R26,Y+1
000432 81ba      	LDD  R27,Y+1+1
000433 91ed      	LD   R30,X+
000434 83a9      	STD  Y+1,R26
000435 83ba      	STD  Y+1+1,R27
000436 2f1e      	MOV  R17,R30
000437 30e0      	CPI  R30,0
000438 f019      	BREQ _0x200000A
000439 2fa1      	MOV  R26,R17
00043a dfd9      	RCALL _lcd_putchar
00043b cff5      	RJMP _0x2000008
                 _0x200000A:
00043c 8118      	LDD  R17,Y+0
00043d 9623      	ADIW R28,3
00043e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00043f 93aa      	ST   -Y,R26
000440 b3e4      	IN   R30,0x14
000441 6fe0      	ORI  R30,LOW(0xF0)
000442 bbe4      	OUT  0x14,R30
000443 9aa2      	SBI  0x14,2
000444 9aa0      	SBI  0x14,0
000445 9aa1      	SBI  0x14,1
000446 98aa      	CBI  0x15,2
000447 98a8      	CBI  0x15,0
000448 98a9      	CBI  0x15,1
000449 81e8      	LD   R30,Y
00044a 93e0 035b 	STS  __lcd_maxx,R30
00044c 58e0      	SUBI R30,-LOW(128)
                +
00044d 93e0 0358+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00044f 81e8      	LD   R30,Y
000450 54e0      	SUBI R30,-LOW(192)
                +
000451 93e0 0359+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000453 e1a4      	LDI  R26,LOW(20)
000454 e0b0      	LDI  R27,0
000455 940e 0703 	CALL _delay_ms
000457 940e 06c9 	CALL SUBOPT_0xF
000459 940e 06c9 	CALL SUBOPT_0xF
00045b 940e 06c9 	CALL SUBOPT_0xF
00045d e2a0      	LDI  R26,LOW(32)
00045e df79      	RCALL __lcd_write_nibble_G100
                +
00045f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000460 958a     +DEC R24
000461 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000462 e2a8      	LDI  R26,LOW(40)
000463 df88      	RCALL __lcd_write_data
000464 e0a4      	LDI  R26,LOW(4)
000465 df86      	RCALL __lcd_write_data
000466 e8a5      	LDI  R26,LOW(133)
000467 df84      	RCALL __lcd_write_data
000468 e0a6      	LDI  R26,LOW(6)
000469 df82      	RCALL __lcd_write_data
00046a df9c      	RCALL _lcd_clear
                 _0x2080003:
00046b 9621      	ADIW R28,1
00046c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
00046d 93ba      	ST   -Y,R27
00046e 93aa      	ST   -Y,R26
00046f 91e9          ld   r30,y+
000470 91f9          ld   r31,y+
000471 91a9          ld   r26,y+
000472 91b9          ld   r27,y+
                 strcmp0:
000473 916d          ld   r22,x+
000474 9171          ld   r23,z+
000475 1767          cp   r22,r23
000476 f421          brne strcmp1
000477 2366          tst  r22
000478 f7d1          brne strcmp0
                 strcmp3:
000479 27ee          clr  r30
00047a 9508          ret
                 strcmp1:
00047b 1b67          sub  r22,r23
00047c f3e1          breq strcmp3
00047d e0e1          ldi  r30,1
00047e f408          brcc strcmp2
00047f 50e2          subi r30,2
                 strcmp2:
000480 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000481 93ba      	ST   -Y,R27
000482 93aa      	ST   -Y,R26
000483 91a9          ld   r26,y+
000484 91b9          ld   r27,y+
000485 27ee          clr  r30
000486 27ff          clr  r31
                 strlen0:
000487 916d          ld   r22,x+
000488 2366          tst  r22
000489 f011          breq strlen1
00048a 9631          adiw r30,1
00048b cffb          rjmp strlen0
                 strlen1:
00048c 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00048d 93ba      	ST   -Y,R27
00048e 93aa      	ST   -Y,R26
00048f 27aa          clr  r26
000490 27bb          clr  r27
000491 91e9          ld   r30,y+
000492 91f9          ld   r31,y+
                 strlenf0:
000493 9005      	lpm  r0,z+
000494 2000          tst  r0
000495 f011          breq strlenf1
000496 9611          adiw r26,1
000497 cffb          rjmp strlenf0
                 strlenf1:
000498 01fd          movw r30,r26
000499 9508          ret
                 ; .FEND
                 _strncpy:
                 ; .FSTART _strncpy
00049a 93aa      	ST   -Y,R26
00049b 9179          ld   r23,y+
00049c 91e9          ld   r30,y+
00049d 91f9          ld   r31,y+
00049e 91a9          ld   r26,y+
00049f 91b9          ld   r27,y+
0004a0 01cd          movw r24,r26
                 strncpy0:
0004a1 2377          tst  r23
0004a2 f051          breq strncpy1
0004a3 957a          dec  r23
0004a4 9161          ld   r22,z+
0004a5 936d          st   x+,r22
0004a6 2366          tst  r22
0004a7 f7c9          brne strncpy0
                 strncpy2:
0004a8 2377          tst  r23
0004a9 f019          breq strncpy1
0004aa 957a          dec  r23
0004ab 936d          st   x+,r22
0004ac cffb          rjmp strncpy2
                 strncpy1:
0004ad 01fc          movw r30,r24
0004ae 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0004af 940e 06be 	CALL SUBOPT_0xD
0004b1 81aa      	LDD  R26,Y+2
0004b2 81bb      	LDD  R27,Y+2+1
0004b3 9612      	ADIW R26,2
0004b4 940e 075b 	CALL __GETW1P
0004b6 9730      	SBIW R30,0
0004b7 f159      	BREQ _0x2040010
0004b8 81aa      	LDD  R26,Y+2
0004b9 81bb      	LDD  R27,Y+2+1
0004ba 9614      	ADIW R26,4
0004bb 940e 075b 	CALL __GETW1P
0004bd 018f      	MOVW R16,R30
0004be 9730      	SBIW R30,0
0004bf f061      	BREQ _0x2040012
                +
0004c0 3002     +CPI R16 , LOW ( 2 )
0004c1 e0e0     +LDI R30 , HIGH ( 2 )
0004c2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004c3 f098      	BRLO _0x2040013
0004c4 01f8      	MOVW R30,R16
0004c5 9731      	SBIW R30,1
0004c6 018f      	MOVW R16,R30
                +
0004c7 81aa     +LDD R26 , Y + 2
0004c8 81bb     +LDD R27 , Y + 2 + 1
0004c9 9614     +ADIW R26 , 4
0004ca 93ed     +ST X + , R30
0004cb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0004cc 81aa      	LDD  R26,Y+2
0004cd 81bb      	LDD  R27,Y+2+1
0004ce 9612      	ADIW R26,2
0004cf 91ed      	LD   R30,X+
0004d0 91fd      	LD   R31,X+
0004d1 9631      	ADIW R30,1
0004d2 93fe      	ST   -X,R31
0004d3 93ee      	ST   -X,R30
0004d4 9731      	SBIW R30,1
0004d5 81ac      	LDD  R26,Y+4
0004d6 83a0      	STD  Z+0,R26
                 _0x2040013:
0004d7 81aa      	LDD  R26,Y+2
0004d8 81bb      	LDD  R27,Y+2+1
0004d9 940e 075b 	CALL __GETW1P
0004db 23ff      	TST  R31
0004dc f02a      	BRMI _0x2040014
0004dd 91ed      	LD   R30,X+
0004de 91fd      	LD   R31,X+
0004df 9631      	ADIW R30,1
0004e0 93fe      	ST   -X,R31
0004e1 93ee      	ST   -X,R30
                 _0x2040014:
0004e2 c006      	RJMP _0x2040015
                 _0x2040010:
0004e3 81aa      	LDD  R26,Y+2
0004e4 81bb      	LDD  R27,Y+2+1
0004e5 efef      	LDI  R30,LOW(65535)
0004e6 efff      	LDI  R31,HIGH(65535)
0004e7 93ed      	ST   X+,R30
0004e8 93fc      	ST   X,R31
                 _0x2040015:
0004e9 8119      	LDD  R17,Y+1
0004ea 8108      	LDD  R16,Y+0
0004eb 9625      	ADIW R28,5
0004ec 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0004ed 93ba      	ST   -Y,R27
0004ee 93aa      	ST   -Y,R26
0004ef 9726      	SBIW R28,6
0004f0 940e 0768 	CALL __SAVELOCR6
0004f2 e010      	LDI  R17,0
0004f3 85ac      	LDD  R26,Y+12
0004f4 85bd      	LDD  R27,Y+12+1
0004f5 e0e0      	LDI  R30,LOW(0)
0004f6 e0f0      	LDI  R31,HIGH(0)
0004f7 93ed      	ST   X+,R30
0004f8 93fc      	ST   X,R31
                 _0x2040016:
0004f9 89ea      	LDD  R30,Y+18
0004fa 89fb      	LDD  R31,Y+18+1
0004fb 9631      	ADIW R30,1
0004fc 8bea      	STD  Y+18,R30
0004fd 8bfb      	STD  Y+18+1,R31
0004fe 9731      	SBIW R30,1
0004ff 91e4      	LPM  R30,Z
000500 2f2e      	MOV  R18,R30
000501 30e0      	CPI  R30,0
000502 f409      	BRNE PC+2
000503 c115      	RJMP _0x2040018
000504 2fe1      	MOV  R30,R17
000505 30e0      	CPI  R30,0
000506 f439      	BRNE _0x204001C
000507 3225      	CPI  R18,37
000508 f411      	BRNE _0x204001D
000509 e011      	LDI  R17,LOW(1)
00050a c002      	RJMP _0x204001E
                 _0x204001D:
00050b 940e 06d0 	CALL SUBOPT_0x10
                 _0x204001E:
00050d c10a      	RJMP _0x204001B
                 _0x204001C:
00050e 30e1      	CPI  R30,LOW(0x1)
00050f f4a9      	BRNE _0x204001F
000510 3225      	CPI  R18,37
000511 f419      	BRNE _0x2040020
000512 940e 06d0 	CALL SUBOPT_0x10
000514 c102      	RJMP _0x20400CC
                 _0x2040020:
000515 e012      	LDI  R17,LOW(2)
000516 e040      	LDI  R20,LOW(0)
000517 e000      	LDI  R16,LOW(0)
000518 322d      	CPI  R18,45
000519 f411      	BRNE _0x2040021
00051a e001      	LDI  R16,LOW(1)
00051b c0fc      	RJMP _0x204001B
                 _0x2040021:
00051c 322b      	CPI  R18,43
00051d f411      	BRNE _0x2040022
00051e e24b      	LDI  R20,LOW(43)
00051f c0f8      	RJMP _0x204001B
                 _0x2040022:
000520 3220      	CPI  R18,32
000521 f411      	BRNE _0x2040023
000522 e240      	LDI  R20,LOW(32)
000523 c0f4      	RJMP _0x204001B
                 _0x2040023:
000524 c002      	RJMP _0x2040024
                 _0x204001F:
000525 30e2      	CPI  R30,LOW(0x2)
000526 f439      	BRNE _0x2040025
                 _0x2040024:
000527 e050      	LDI  R21,LOW(0)
000528 e013      	LDI  R17,LOW(3)
000529 3320      	CPI  R18,48
00052a f411      	BRNE _0x2040026
00052b 6800      	ORI  R16,LOW(128)
00052c c0eb      	RJMP _0x204001B
                 _0x2040026:
00052d c003      	RJMP _0x2040027
                 _0x2040025:
00052e 30e3      	CPI  R30,LOW(0x3)
00052f f009      	BREQ PC+2
000530 c0e7      	RJMP _0x204001B
                 _0x2040027:
000531 3320      	CPI  R18,48
000532 f010      	BRLO _0x204002A
000533 332a      	CPI  R18,58
000534 f008      	BRLO _0x204002B
                 _0x204002A:
000535 c007      	RJMP _0x2040029
                 _0x204002B:
000536 e0aa      	LDI  R26,LOW(10)
000537 9f5a      	MUL  R21,R26
000538 2d50      	MOV  R21,R0
000539 2fe2      	MOV  R30,R18
00053a 53e0      	SUBI R30,LOW(48)
00053b 0f5e      	ADD  R21,R30
00053c c0db      	RJMP _0x204001B
                 _0x2040029:
00053d 2fe2      	MOV  R30,R18
00053e 36e3      	CPI  R30,LOW(0x63)
00053f f449      	BRNE _0x204002F
000540 940e 06d7 	CALL SUBOPT_0x11
000542 89e8      	LDD  R30,Y+16
000543 89f9      	LDD  R31,Y+16+1
000544 81a4      	LDD  R26,Z+4
000545 93aa      	ST   -Y,R26
000546 940e 06dd 	CALL SUBOPT_0x12
000548 c0ce      	RJMP _0x2040030
                 _0x204002F:
000549 37e3      	CPI  R30,LOW(0x73)
00054a f441      	BRNE _0x2040032
00054b 940e 06d7 	CALL SUBOPT_0x11
00054d 940e 06e3 	CALL SUBOPT_0x13
00054f 940e 0481 	CALL _strlen
000551 2f1e      	MOV  R17,R30
000552 c00a      	RJMP _0x2040033
                 _0x2040032:
000553 37e0      	CPI  R30,LOW(0x70)
000554 f461      	BRNE _0x2040035
000555 940e 06d7 	CALL SUBOPT_0x11
000557 940e 06e3 	CALL SUBOPT_0x13
000559 940e 048d 	CALL _strlenf
00055b 2f1e      	MOV  R17,R30
00055c 6008      	ORI  R16,LOW(8)
                 _0x2040033:
00055d 6002      	ORI  R16,LOW(2)
00055e 770f      	ANDI R16,LOW(127)
00055f e030      	LDI  R19,LOW(0)
000560 c034      	RJMP _0x2040036
                 _0x2040035:
000561 36e4      	CPI  R30,LOW(0x64)
000562 f011      	BREQ _0x2040039
000563 36e9      	CPI  R30,LOW(0x69)
000564 f411      	BRNE _0x204003A
                 _0x2040039:
000565 6004      	ORI  R16,LOW(4)
000566 c002      	RJMP _0x204003B
                 _0x204003A:
000567 37e5      	CPI  R30,LOW(0x75)
000568 f431      	BRNE _0x204003C
                 _0x204003B:
000569 e6e4      	LDI  R30,LOW(_tbl10_G102*2)
00056a e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
00056b 83ee      	STD  Y+6,R30
00056c 83ff      	STD  Y+6+1,R31
00056d e015      	LDI  R17,LOW(5)
00056e c00c      	RJMP _0x204003D
                 _0x204003C:
00056f 35e8      	CPI  R30,LOW(0x58)
000570 f411      	BRNE _0x204003F
000571 6008      	ORI  R16,LOW(8)
000572 c003      	RJMP _0x2040040
                 _0x204003F:
000573 37e8      	CPI  R30,LOW(0x78)
000574 f009      	BREQ PC+2
000575 c0a1      	RJMP _0x2040071
                 _0x2040040:
000576 e6ee      	LDI  R30,LOW(_tbl16_G102*2)
000577 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
000578 83ee      	STD  Y+6,R30
000579 83ff      	STD  Y+6+1,R31
00057a e014      	LDI  R17,LOW(4)
                 _0x204003D:
00057b ff02      	SBRS R16,2
00057c c014      	RJMP _0x2040042
00057d 940e 06d7 	CALL SUBOPT_0x11
00057f 940e 06ed 	CALL SUBOPT_0x14
000581 85ab      	LDD  R26,Y+11
000582 23aa      	TST  R26
000583 f43a      	BRPL _0x2040043
000584 85ea      	LDD  R30,Y+10
000585 85fb      	LDD  R31,Y+10+1
000586 940e 0711 	CALL __ANEGW1
000588 87ea      	STD  Y+10,R30
000589 87fb      	STD  Y+10+1,R31
00058a e24d      	LDI  R20,LOW(45)
                 _0x2040043:
00058b 3040      	CPI  R20,0
00058c f011      	BREQ _0x2040044
00058d 5f1f      	SUBI R17,-LOW(1)
00058e c001      	RJMP _0x2040045
                 _0x2040044:
00058f 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000590 c004      	RJMP _0x2040046
                 _0x2040042:
000591 940e 06d7 	CALL SUBOPT_0x11
000593 940e 06ed 	CALL SUBOPT_0x14
                 _0x2040046:
                 _0x2040036:
000595 fd00      	SBRC R16,0
000596 c011      	RJMP _0x2040047
                 _0x2040048:
000597 1715      	CP   R17,R21
000598 f478      	BRSH _0x204004A
000599 ff07      	SBRS R16,7
00059a c008      	RJMP _0x204004B
00059b ff02      	SBRS R16,2
00059c c004      	RJMP _0x204004C
00059d 7f0b      	ANDI R16,LOW(251)
00059e 2f24      	MOV  R18,R20
00059f 5011      	SUBI R17,LOW(1)
0005a0 c001      	RJMP _0x204004D
                 _0x204004C:
0005a1 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0005a2 c001      	RJMP _0x204004E
                 _0x204004B:
0005a3 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0005a4 940e 06d0 	CALL SUBOPT_0x10
0005a6 5051      	SUBI R21,LOW(1)
0005a7 cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0005a8 2f31      	MOV  R19,R17
0005a9 ff01      	SBRS R16,1
0005aa c017      	RJMP _0x204004F
                 _0x2040050:
0005ab 3030      	CPI  R19,0
0005ac f0a1      	BREQ _0x2040052
0005ad ff03      	SBRS R16,3
0005ae c006      	RJMP _0x2040053
0005af 81ee      	LDD  R30,Y+6
0005b0 81ff      	LDD  R31,Y+6+1
0005b1 9125      	LPM  R18,Z+
0005b2 83ee      	STD  Y+6,R30
0005b3 83ff      	STD  Y+6+1,R31
0005b4 c005      	RJMP _0x2040054
                 _0x2040053:
0005b5 81ae      	LDD  R26,Y+6
0005b6 81bf      	LDD  R27,Y+6+1
0005b7 912d      	LD   R18,X+
0005b8 83ae      	STD  Y+6,R26
0005b9 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0005ba 940e 06d0 	CALL SUBOPT_0x10
0005bc 3050      	CPI  R21,0
0005bd f009      	BREQ _0x2040055
0005be 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0005bf 5031      	SUBI R19,LOW(1)
0005c0 cfea      	RJMP _0x2040050
                 _0x2040052:
0005c1 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0005c2 e320      	LDI  R18,LOW(48)
0005c3 81ee      	LDD  R30,Y+6
0005c4 81ff      	LDD  R31,Y+6+1
0005c5 940e 075f 	CALL __GETW1PF
0005c7 87e8      	STD  Y+8,R30
0005c8 87f9      	STD  Y+8+1,R31
0005c9 81ee      	LDD  R30,Y+6
0005ca 81ff      	LDD  R31,Y+6+1
0005cb 9632      	ADIW R30,2
0005cc 83ee      	STD  Y+6,R30
0005cd 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0005ce 85e8      	LDD  R30,Y+8
0005cf 85f9      	LDD  R31,Y+8+1
0005d0 85aa      	LDD  R26,Y+10
0005d1 85bb      	LDD  R27,Y+10+1
0005d2 17ae      	CP   R26,R30
0005d3 07bf      	CPC  R27,R31
0005d4 f050      	BRLO _0x204005C
0005d5 5f2f      	SUBI R18,-LOW(1)
0005d6 85a8      	LDD  R26,Y+8
0005d7 85b9      	LDD  R27,Y+8+1
0005d8 85ea      	LDD  R30,Y+10
0005d9 85fb      	LDD  R31,Y+10+1
0005da 1bea      	SUB  R30,R26
0005db 0bfb      	SBC  R31,R27
0005dc 87ea      	STD  Y+10,R30
0005dd 87fb      	STD  Y+10+1,R31
0005de cfef      	RJMP _0x204005A
                 _0x204005C:
0005df 332a      	CPI  R18,58
0005e0 f028      	BRLO _0x204005D
0005e1 ff03      	SBRS R16,3
0005e2 c002      	RJMP _0x204005E
0005e3 5f29      	SUBI R18,-LOW(7)
0005e4 c001      	RJMP _0x204005F
                 _0x204005E:
0005e5 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0005e6 fd04      	SBRC R16,4
0005e7 c01a      	RJMP _0x2040061
0005e8 3321      	CPI  R18,49
0005e9 f420      	BRSH _0x2040063
0005ea 85a8      	LDD  R26,Y+8
0005eb 85b9      	LDD  R27,Y+8+1
0005ec 9711      	SBIW R26,1
0005ed f409      	BRNE _0x2040062
                 _0x2040063:
0005ee c009      	RJMP _0x20400CD
                 _0x2040062:
0005ef 1753      	CP   R21,R19
0005f0 f010      	BRLO _0x2040067
0005f1 ff00      	SBRS R16,0
0005f2 c001      	RJMP _0x2040068
                 _0x2040067:
0005f3 c013      	RJMP _0x2040066
                 _0x2040068:
0005f4 e220      	LDI  R18,LOW(32)
0005f5 ff07      	SBRS R16,7
0005f6 c00b      	RJMP _0x2040069
0005f7 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0005f8 6100      	ORI  R16,LOW(16)
0005f9 ff02      	SBRS R16,2
0005fa c007      	RJMP _0x204006A
0005fb 7f0b      	ANDI R16,LOW(251)
0005fc 934a      	ST   -Y,R20
0005fd 940e 06dd 	CALL SUBOPT_0x12
0005ff 3050      	CPI  R21,0
000600 f009      	BREQ _0x204006B
000601 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000602 940e 06d0 	CALL SUBOPT_0x10
000604 3050      	CPI  R21,0
000605 f009      	BREQ _0x204006C
000606 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000607 5031      	SUBI R19,LOW(1)
000608 85a8      	LDD  R26,Y+8
000609 85b9      	LDD  R27,Y+8+1
00060a 9712      	SBIW R26,2
00060b f008      	BRLO _0x2040059
00060c cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00060d ff00      	SBRS R16,0
00060e c008      	RJMP _0x204006D
                 _0x204006E:
00060f 3050      	CPI  R21,0
000610 f031      	BREQ _0x2040070
000611 5051      	SUBI R21,LOW(1)
000612 e2e0      	LDI  R30,LOW(32)
000613 93ea      	ST   -Y,R30
000614 940e 06dd 	CALL SUBOPT_0x12
000616 cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000617 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000618 cee0      	RJMP _0x2040016
                 _0x2040018:
000619 85ac      	LDD  R26,Y+12
00061a 85bd      	LDD  R27,Y+12+1
00061b 940e 075b 	CALL __GETW1P
00061d 940e 076f 	CALL __LOADLOCR6
                 _0x2080002:
00061f 9664      	ADIW R28,20
000620 9508      	RET
                 ; .FEND
                 _snprintf:
                 ; .FSTART _snprintf
000621 92ff      	PUSH R15
000622 2ef8      	MOV  R15,R24
000623 9726      	SBIW R28,6
000624 940e 076a 	CALL __SAVELOCR4
                +
000626 e020     +LDI R18 , LOW ( 0 )
000627 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000628 940e 06f5 	CALL SUBOPT_0x15
00062a 9730      	SBIW R30,0
00062b f419      	BRNE _0x2040073
00062c efef      	LDI  R30,LOW(65535)
00062d efff      	LDI  R31,HIGH(65535)
00062e c028      	RJMP _0x2080001
                 _0x2040073:
00062f 940e 06fc 	CALL SUBOPT_0x16
000631 9730      	SBIW R30,0
000632 f119      	BREQ _0x2040074
000633 01de      	MOVW R26,R28
000634 9616      	ADIW R26,6
000635 940e 070d 	CALL __ADDW2R15
000637 018d      	MOVW R16,R26
000638 940e 06f5 	CALL SUBOPT_0x15
00063a 83ee      	STD  Y+6,R30
00063b 83ff      	STD  Y+6+1,R31
00063c 940e 06fc 	CALL SUBOPT_0x16
00063e 87e8      	STD  Y+8,R30
00063f 87f9      	STD  Y+8+1,R31
000640 01de      	MOVW R26,R28
000641 961a      	ADIW R26,10
000642 940e 070d 	CALL __ADDW2R15
000644 940e 075b 	CALL __GETW1P
000646 93fa      	ST   -Y,R31
000647 93ea      	ST   -Y,R30
000648 931a      	ST   -Y,R17
000649 930a      	ST   -Y,R16
00064a eaef      	LDI  R30,LOW(_put_buff_G102)
00064b e0f4      	LDI  R31,HIGH(_put_buff_G102)
00064c 93fa      	ST   -Y,R31
00064d 93ea      	ST   -Y,R30
00064e 01de      	MOVW R26,R28
00064f 961a      	ADIW R26,10
000650 de9c      	RCALL __print_G102
000651 019f      	MOVW R18,R30
000652 81ae      	LDD  R26,Y+6
000653 81bf      	LDD  R27,Y+6+1
000654 e0e0      	LDI  R30,LOW(0)
000655 93ec      	ST   X,R30
                 _0x2040074:
000656 01f9      	MOVW R30,R18
                 _0x2080001:
000657 940e 0771 	CALL __LOADLOCR4
000659 962a      	ADIW R28,10
00065a 90ff      	POP  R15
00065b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _pass:
000306           	.BYTE 0x10
                 _pass_temp:
000316           	.BYTE 0x10
                 _new_pass:
000326           	.BYTE 0x10
                 _msg:
000336           	.BYTE 0x20
                 __base_y_G100:
000356           	.BYTE 0x4
                 __lcd_y:
00035a           	.BYTE 0x1
                 __lcd_maxx:
00035b           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00065c e6e4      	LDI  R30,LOW(100)
00065d e0f0      	LDI  R31,HIGH(100)
00065e 15ec      	CP   R30,R12
00065f 05fd      	CPC  R31,R13
000660 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1:
000661 920a      	ST   -Y,R0
000662 921a      	ST   -Y,R1
000663 92fa      	ST   -Y,R15
000664 936a      	ST   -Y,R22
000665 937a      	ST   -Y,R23
000666 938a      	ST   -Y,R24
000667 939a      	ST   -Y,R25
000668 93aa      	ST   -Y,R26
000669 93ba      	ST   -Y,R27
00066a 93ea      	ST   -Y,R30
00066b 93fa      	ST   -Y,R31
00066c b7ef      	IN   R30,SREG
00066d 93ea      	ST   -Y,R30
00066e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00066f 01f6      	MOVW R30,R12
000670 3fef      	CPI  R30,LOW(0xFFFFFFFF)
000671 efaf      	LDI  R26,HIGH(0xFFFFFFFF)
000672 07fa      	CPC  R31,R26
000673 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000674 e1a6      	LDI  R26,LOW(_pass_temp)
000675 e0b3      	LDI  R27,HIGH(_pass_temp)
000676 940e 0339 	CALL _my_clear
000678 24cc      	CLR  R12
000679 24dd      	CLR  R13
00067a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
00067b 940e 0339 	CALL _my_clear
00067d e2a6      	LDI  R26,LOW(_new_pass)
00067e e0b3      	LDI  R27,HIGH(_new_pass)
00067f 940c 0339 	JMP  _my_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000681 e1a6      	LDI  R26,LOW(_pass_temp)
000682 e0b3      	LDI  R27,HIGH(_pass_temp)
000683 cff7      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x6:
000684 e0a3      	LDI  R26,LOW(3)
000685 9f1a      	MUL  R17,R26
000686 01f0      	MOVW R30,R0
000687 5ae8      	SUBI R30,LOW(-_key_number*2)
000688 4fff      	SBCI R31,HIGH(-_key_number*2)
000689 01df      	MOVW R26,R30
00068a 2fe0      	MOV  R30,R16
00068b e0f0      	LDI  R31,0
00068c 0fea      	ADD  R30,R26
00068d 1ffb      	ADC  R31,R27
00068e 91a4      	LPM  R26,Z
00068f 32a3      	CPI  R26,LOW(0x23)
000690 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0x7:
000691 e0a3      	LDI  R26,LOW(3)
000692 9f1a      	MUL  R17,R26
000693 01f0      	MOVW R30,R0
000694 5ae8      	SUBI R30,LOW(-_key_number*2)
000695 4fff      	SBCI R31,HIGH(-_key_number*2)
000696 01df      	MOVW R26,R30
000697 2fe0      	MOV  R30,R16
000698 e0f0      	LDI  R31,0
000699 0fea      	ADD  R30,R26
00069a 1ffb      	ADC  R31,R27
00069b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00069c e0e6      	LDI  R30,LOW(_pass)
00069d e0f3      	LDI  R31,HIGH(_pass)
00069e 93fa      	ST   -Y,R31
00069f 93ea      	ST   -Y,R30
0006a0 e1a6      	LDI  R26,LOW(_pass_temp)
0006a1 e0b3      	LDI  R27,HIGH(_pass_temp)
0006a2 940e 046d 	CALL _strcmp
0006a4 30e0      	CPI  R30,0
0006a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0006a6 940e 0715 	CALL __CWD1
0006a8 940e 0763 	CALL __PUTPARD1
0006aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0006ab e1a6      	LDI  R26,LOW(_pass_temp)
0006ac e0b3      	LDI  R27,HIGH(_pass_temp)
0006ad 940c 032b 	JMP  _clear_one
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xB:
0006af e1a6      	LDI  R26,LOW(_pass_temp)
0006b0 e0b3      	LDI  R27,HIGH(_pass_temp)
0006b1 940e 0481 	CALL _strlen
0006b3 5eea      	SUBI R30,LOW(-_pass_temp)
0006b4 4ffc      	SBCI R31,HIGH(-_pass_temp)
0006b5 01bf      	MOVW R22,R30
0006b6 cfda      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0006b7 940e 042e 	CALL _lcd_puts
0006b9 e0e0      	LDI  R30,LOW(0)
0006ba 93ea      	ST   -Y,R30
0006bb e0a1      	LDI  R26,LOW(1)
0006bc 940c 03f8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0006be 93ba      	ST   -Y,R27
0006bf 93aa      	ST   -Y,R26
0006c0 931a      	ST   -Y,R17
0006c1 930a      	ST   -Y,R16
0006c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0006c3 940e 03ec 	CALL __lcd_write_data
0006c5 e0a3      	LDI  R26,LOW(3)
0006c6 e0b0      	LDI  R27,0
0006c7 940c 0703 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
0006c9 e3a0      	LDI  R26,LOW(48)
0006ca 940e 03d8 	CALL __lcd_write_nibble_G100
                +
0006cc e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0006cd 958a     +DEC R24
0006ce f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0006cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
0006d0 932a      	ST   -Y,R18
0006d1 85ad      	LDD  R26,Y+13
0006d2 85be      	LDD  R27,Y+13+1
0006d3 85ef      	LDD  R30,Y+15
0006d4 89f8      	LDD  R31,Y+15+1
0006d5 9509      	ICALL
0006d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
0006d7 89e8      	LDD  R30,Y+16
0006d8 89f9      	LDD  R31,Y+16+1
0006d9 9734      	SBIW R30,4
0006da 8be8      	STD  Y+16,R30
0006db 8bf9      	STD  Y+16+1,R31
0006dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0006dd 85ad      	LDD  R26,Y+13
0006de 85be      	LDD  R27,Y+13+1
0006df 85ef      	LDD  R30,Y+15
0006e0 89f8      	LDD  R31,Y+15+1
0006e1 9509      	ICALL
0006e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
0006e3 89a8      	LDD  R26,Y+16
0006e4 89b9      	LDD  R27,Y+16+1
0006e5 9614      	ADIW R26,4
0006e6 940e 075b 	CALL __GETW1P
0006e8 83ee      	STD  Y+6,R30
0006e9 83ff      	STD  Y+6+1,R31
0006ea 81ae      	LDD  R26,Y+6
0006eb 81bf      	LDD  R27,Y+6+1
0006ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
0006ed 89a8      	LDD  R26,Y+16
0006ee 89b9      	LDD  R27,Y+16+1
0006ef 9614      	ADIW R26,4
0006f0 940e 075b 	CALL __GETW1P
0006f2 87ea      	STD  Y+10,R30
0006f3 87fb      	STD  Y+10+1,R31
0006f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0006f5 01de      	MOVW R26,R28
0006f6 961e      	ADIW R26,14
0006f7 940e 070d 	CALL __ADDW2R15
0006f9 940e 075b 	CALL __GETW1P
0006fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0006fc 01de      	MOVW R26,R28
0006fd 961c      	ADIW R26,12
0006fe 940e 070d 	CALL __ADDW2R15
000700 940e 075b 	CALL __GETW1P
000702 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000703 9610      	adiw r26,0
000704 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000705 ef8a     +LDI R24 , LOW ( 0xFA )
000706 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000707 9701     +SBIW R24 , 1
000708 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000709 95a8      	wdr
00070a 9711      	sbiw r26,1
00070b f7c9      	brne __delay_ms0
                 __delay_ms1:
00070c 9508      	ret
                 
                 __ADDW2R15:
00070d 2400      	CLR  R0
00070e 0daf      	ADD  R26,R15
00070f 1db0      	ADC  R27,R0
000710 9508      	RET
                 
                 __ANEGW1:
000711 95f1      	NEG  R31
000712 95e1      	NEG  R30
000713 40f0      	SBCI R31,0
000714 9508      	RET
                 
                 __CWD1:
000715 2f6f      	MOV  R22,R31
000716 0f66      	ADD  R22,R22
000717 0b66      	SBC  R22,R22
000718 2f76      	MOV  R23,R22
000719 9508      	RET
                 
                 __MULW12U:
00071a 9ffa      	MUL  R31,R26
00071b 2df0      	MOV  R31,R0
00071c 9feb      	MUL  R30,R27
00071d 0df0      	ADD  R31,R0
00071e 9fea      	MUL  R30,R26
00071f 2de0      	MOV  R30,R0
000720 0df1      	ADD  R31,R1
000721 9508      	RET
                 
                 __MULW12:
000722 d02a      	RCALL __CHKSIGNW
000723 dff6      	RCALL __MULW12U
000724 f40e      	BRTC __MULW121
000725 dfeb      	RCALL __ANEGW1
                 __MULW121:
000726 9508      	RET
                 
                 __DIVW21U:
000727 2400      	CLR  R0
000728 2411      	CLR  R1
000729 e190      	LDI  R25,16
                 __DIVW21U1:
00072a 0faa      	LSL  R26
00072b 1fbb      	ROL  R27
00072c 1c00      	ROL  R0
00072d 1c11      	ROL  R1
00072e 1a0e      	SUB  R0,R30
00072f 0a1f      	SBC  R1,R31
000730 f418      	BRCC __DIVW21U2
000731 0e0e      	ADD  R0,R30
000732 1e1f      	ADC  R1,R31
000733 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000734 60a1      	SBR  R26,1
                 __DIVW21U3:
000735 959a      	DEC  R25
000736 f799      	BRNE __DIVW21U1
000737 01fd      	MOVW R30,R26
000738 01d0      	MOVW R26,R0
000739 9508      	RET
                 
                 __DIVW21:
00073a d012      	RCALL __CHKSIGNW
00073b dfeb      	RCALL __DIVW21U
00073c f40e      	BRTC __DIVW211
00073d dfd3      	RCALL __ANEGW1
                 __DIVW211:
00073e 9508      	RET
                 
                 __MODW21:
00073f 94e8      	CLT
000740 ffb7      	SBRS R27,7
000741 c004      	RJMP __MODW211
000742 95a0      	COM  R26
000743 95b0      	COM  R27
000744 9611      	ADIW R26,1
000745 9468      	SET
                 __MODW211:
000746 fdf7      	SBRC R31,7
000747 dfc9      	RCALL __ANEGW1
000748 dfde      	RCALL __DIVW21U
000749 01fd      	MOVW R30,R26
00074a f40e      	BRTC __MODW212
00074b dfc5      	RCALL __ANEGW1
                 __MODW212:
00074c 9508      	RET
                 
                 __CHKSIGNW:
00074d 94e8      	CLT
00074e fff7      	SBRS R31,7
00074f c002      	RJMP __CHKSW1
000750 dfc0      	RCALL __ANEGW1
000751 9468      	SET
                 __CHKSW1:
000752 ffb7      	SBRS R27,7
000753 c006      	RJMP __CHKSW2
000754 95a0      	COM  R26
000755 95b0      	COM  R27
000756 9611      	ADIW R26,1
000757 f800      	BLD  R0,0
000758 9403      	INC  R0
000759 fa00      	BST  R0,0
                 __CHKSW2:
00075a 9508      	RET
                 
                 __GETW1P:
00075b 91ed      	LD   R30,X+
00075c 91fc      	LD   R31,X
00075d 9711      	SBIW R26,1
00075e 9508      	RET
                 
                 __GETW1PF:
00075f 9005      	LPM  R0,Z+
000760 91f4      	LPM  R31,Z
000761 2de0      	MOV  R30,R0
000762 9508      	RET
                 
                 __PUTPARD1:
000763 937a      	ST   -Y,R23
000764 936a      	ST   -Y,R22
000765 93fa      	ST   -Y,R31
000766 93ea      	ST   -Y,R30
000767 9508      	RET
                 
                 __SAVELOCR6:
000768 935a      	ST   -Y,R21
                 __SAVELOCR5:
000769 934a      	ST   -Y,R20
                 __SAVELOCR4:
00076a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00076b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00076c 931a      	ST   -Y,R17
00076d 930a      	ST   -Y,R16
00076e 9508      	RET
                 
                 __LOADLOCR6:
00076f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000770 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000771 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000772 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000773 8119      	LDD  R17,Y+1
000774 8108      	LD   R16,Y
000775 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  41 r1 :  10 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   6 r7 :   1 
r8 :   6 r9 :   1 r10:   6 r11:   2 r12:  20 r13:   7 r14:   0 r15:   6 
r16:  53 r17:  37 r18:  32 r19:  12 r20:   9 r21:  17 r22:  27 r23:  12 
r24:  28 r25:   9 r26: 247 r27:  91 r28:  24 r29:   1 r30: 372 r31: 158 
x  :  34 y  : 250 z  :  31 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :  12 
adiw  :  36 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  29 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  84 brpl  :   1 brsh  :   3 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 124 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   9 cpc   :  31 cpi   :  71 cpse  :   0 dec   :  10 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  28 ld    :  61 ldd   :  85 ldi   : 275 
lds   :   2 lpm   :  42 lsl   :   1 lsr   :   0 mov   :  27 movw  :  70 
mul   :   6 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   8 out   :  31 pop   :   1 push  :   1 rcall :  41 ret   :  46 
reti  :   2 rjmp  : 116 rol   :   3 ror   :   0 sbc   :   4 sbci  :  10 
sbi   :   6 sbic  :   0 sbis  :   4 sbiw  :  26 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   1 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 112 std   :  31 sts   :   6 sub   :   4 subi  :  27 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000eec   3484    336   3820   32768  11.7%
[.dseg] 0x000060 0x00035c      0    252    252    2048  12.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
